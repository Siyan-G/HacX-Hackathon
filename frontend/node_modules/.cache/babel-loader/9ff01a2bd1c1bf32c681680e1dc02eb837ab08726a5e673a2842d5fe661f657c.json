{"ast":null,"code":"// tslint:disable:no-console\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  createKey: null,\n  default: null,\n  matchesMiddleware: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  createKey: function () {\n    return createKey;\n  },\n  default: function () {\n    return Router;\n  },\n  matchesMiddleware: function () {\n    return matchesMiddleware;\n  }\n});\nconst _interop_require_default = require(\"@swc/helpers/_/_interop_require_default\");\nconst _interop_require_wildcard = require(\"@swc/helpers/_/_interop_require_wildcard\");\nconst _removetrailingslash = require(\"./utils/remove-trailing-slash\");\nconst _routeloader = require(\"../../../client/route-loader\");\nconst _script = require(\"../../../client/script\");\nconst _iserror = /*#__PURE__*/_interop_require_wildcard._(require(\"../../../lib/is-error\"));\nconst _denormalizepagepath = require(\"../page-path/denormalize-page-path\");\nconst _normalizelocalepath = require(\"../i18n/normalize-locale-path\");\nconst _mitt = /*#__PURE__*/_interop_require_default._(require(\"../mitt\"));\nconst _utils = require(\"../utils\");\nconst _isdynamic = require(\"./utils/is-dynamic\");\nconst _parserelativeurl = require(\"./utils/parse-relative-url\");\nconst _resolverewrites = /*#__PURE__*/_interop_require_default._(require(\"./utils/resolve-rewrites\"));\nconst _routematcher = require(\"./utils/route-matcher\");\nconst _routeregex = require(\"./utils/route-regex\");\nconst _formaturl = require(\"./utils/format-url\");\nconst _detectdomainlocale = require(\"../../../client/detect-domain-locale\");\nconst _parsepath = require(\"./utils/parse-path\");\nconst _addlocale = require(\"../../../client/add-locale\");\nconst _removelocale = require(\"../../../client/remove-locale\");\nconst _removebasepath = require(\"../../../client/remove-base-path\");\nconst _addbasepath = require(\"../../../client/add-base-path\");\nconst _hasbasepath = require(\"../../../client/has-base-path\");\nconst _resolvehref = require(\"../../../client/resolve-href\");\nconst _isapiroute = require(\"../../../lib/is-api-route\");\nconst _getnextpathnameinfo = require(\"./utils/get-next-pathname-info\");\nconst _formatnextpathnameinfo = require(\"./utils/format-next-pathname-info\");\nconst _comparestates = require(\"./utils/compare-states\");\nconst _islocalurl = require(\"./utils/is-local-url\");\nconst _isbot = require(\"./utils/is-bot\");\nconst _omit = require(\"./utils/omit\");\nconst _interpolateas = require(\"./utils/interpolate-as\");\nconst _handlesmoothscroll = require(\"./utils/handle-smooth-scroll\");\nfunction buildCancellationError() {\n  return Object.assign(new Error(\"Route Cancelled\"), {\n    cancelled: true\n  });\n}\nasync function matchesMiddleware(options) {\n  const matchers = await Promise.resolve(options.router.pageLoader.getMiddleware());\n  if (!matchers) return false;\n  const {\n    pathname: asPathname\n  } = (0, _parsepath.parsePath)(options.asPath);\n  // remove basePath first since path prefix has to be in the order of `/${basePath}/${locale}`\n  const cleanedAs = (0, _hasbasepath.hasBasePath)(asPathname) ? (0, _removebasepath.removeBasePath)(asPathname) : asPathname;\n  const asWithBasePathAndLocale = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(cleanedAs, options.locale));\n  // Check only path match on client. Matching \"has\" should be done on server\n  // where we can access more info such as headers, HttpOnly cookie, etc.\n  return matchers.some(m => new RegExp(m.regexp).test(asWithBasePathAndLocale));\n}\nfunction stripOrigin(url) {\n  const origin = (0, _utils.getLocationOrigin)();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  let [resolvedHref, resolvedAs] = (0, _resolvehref.resolveHref)(router, url, true);\n  const origin = (0, _utils.getLocationOrigin)();\n  const hrefWasAbsolute = resolvedHref.startsWith(origin);\n  const asWasAbsolute = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  const preparedUrl = hrefWasAbsolute ? resolvedHref : (0, _addbasepath.addBasePath)(resolvedHref);\n  const preparedAs = as ? stripOrigin((0, _resolvehref.resolveHref)(router, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asWasAbsolute ? preparedAs : (0, _addbasepath.addBasePath)(preparedAs)\n  };\n}\nfunction resolveDynamicRoute(pathname, pages) {\n  const cleanPathname = (0, _removetrailingslash.removeTrailingSlash)((0, _denormalizepagepath.denormalizePagePath)(pathname));\n  if (cleanPathname === \"/404\" || cleanPathname === \"/_error\") {\n    return pathname;\n  }\n  // handle resolving href for dynamic routes\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(page => {\n      if ((0, _isdynamic.isDynamicRoute)(page) && (0, _routeregex.getRouteRegex)(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n  return (0, _removetrailingslash.removeTrailingSlash)(pathname);\n}\nfunction getMiddlewareData(source, response, options) {\n  const nextConfig = {\n    basePath: options.router.basePath,\n    i18n: {\n      locales: options.router.locales\n    },\n    trailingSlash: Boolean(process.env.__NEXT_TRAILING_SLASH)\n  };\n  const rewriteHeader = response.headers.get(\"x-nextjs-rewrite\");\n  let rewriteTarget = rewriteHeader || response.headers.get(\"x-nextjs-matched-path\");\n  const matchedPath = response.headers.get(\"x-matched-path\");\n  if (matchedPath && !rewriteTarget && !matchedPath.includes(\"__next_data_catchall\") && !matchedPath.includes(\"/_error\") && !matchedPath.includes(\"/404\")) {\n    // leverage x-matched-path to detect next.config.js rewrites\n    rewriteTarget = matchedPath;\n  }\n  if (rewriteTarget) {\n    if (rewriteTarget.startsWith(\"/\") || process.env.__NEXT_EXTERNAL_MIDDLEWARE_REWRITE_RESOLVE) {\n      const parsedRewriteTarget = (0, _parserelativeurl.parseRelativeUrl)(rewriteTarget);\n      const pathnameInfo = (0, _getnextpathnameinfo.getNextPathnameInfo)(parsedRewriteTarget.pathname, {\n        nextConfig,\n        parseData: true\n      });\n      let fsPathname = (0, _removetrailingslash.removeTrailingSlash)(pathnameInfo.pathname);\n      return Promise.all([options.router.pageLoader.getPageList(), (0, _routeloader.getClientBuildManifest)()]).then(param => {\n        let [pages, {\n          __rewrites: rewrites\n        }] = param;\n        let as = (0, _addlocale.addLocale)(pathnameInfo.pathname, pathnameInfo.locale);\n        if ((0, _isdynamic.isDynamicRoute)(as) || !rewriteHeader && pages.includes((0, _normalizelocalepath.normalizeLocalePath)((0, _removebasepath.removeBasePath)(as), options.router.locales).pathname)) {\n          const parsedSource = (0, _getnextpathnameinfo.getNextPathnameInfo)((0, _parserelativeurl.parseRelativeUrl)(source).pathname, {\n            nextConfig: process.env.__NEXT_HAS_REWRITES ? undefined : nextConfig,\n            parseData: true\n          });\n          as = (0, _addbasepath.addBasePath)(parsedSource.pathname);\n          parsedRewriteTarget.pathname = as;\n        }\n        if (process.env.__NEXT_HAS_REWRITES) {\n          const result = (0, _resolverewrites.default)(as, pages, rewrites, parsedRewriteTarget.query, path => resolveDynamicRoute(path, pages), options.router.locales);\n          if (result.matchedPage) {\n            parsedRewriteTarget.pathname = result.parsedAs.pathname;\n            as = parsedRewriteTarget.pathname;\n            Object.assign(parsedRewriteTarget.query, result.parsedAs.query);\n          }\n        } else if (!pages.includes(fsPathname)) {\n          const resolvedPathname = resolveDynamicRoute(fsPathname, pages);\n          if (resolvedPathname !== fsPathname) {\n            fsPathname = resolvedPathname;\n          }\n        }\n        const resolvedHref = !pages.includes(fsPathname) ? resolveDynamicRoute((0, _normalizelocalepath.normalizeLocalePath)((0, _removebasepath.removeBasePath)(parsedRewriteTarget.pathname), options.router.locales).pathname, pages) : fsPathname;\n        if ((0, _isdynamic.isDynamicRoute)(resolvedHref)) {\n          const matches = (0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(resolvedHref))(as);\n          Object.assign(parsedRewriteTarget.query, matches || {});\n        }\n        return {\n          type: \"rewrite\",\n          parsedAs: parsedRewriteTarget,\n          resolvedHref\n        };\n      });\n    }\n    const src = (0, _parsepath.parsePath)(source);\n    const pathname = (0, _formatnextpathnameinfo.formatNextPathnameInfo)({\n      ...(0, _getnextpathnameinfo.getNextPathnameInfo)(src.pathname, {\n        nextConfig,\n        parseData: true\n      }),\n      defaultLocale: options.router.defaultLocale,\n      buildId: \"\"\n    });\n    return Promise.resolve({\n      type: \"redirect-external\",\n      destination: \"\" + pathname + src.query + src.hash\n    });\n  }\n  const redirectTarget = response.headers.get(\"x-nextjs-redirect\");\n  if (redirectTarget) {\n    if (redirectTarget.startsWith(\"/\")) {\n      const src = (0, _parsepath.parsePath)(redirectTarget);\n      const pathname = (0, _formatnextpathnameinfo.formatNextPathnameInfo)({\n        ...(0, _getnextpathnameinfo.getNextPathnameInfo)(src.pathname, {\n          nextConfig,\n          parseData: true\n        }),\n        defaultLocale: options.router.defaultLocale,\n        buildId: \"\"\n      });\n      return Promise.resolve({\n        type: \"redirect-internal\",\n        newAs: \"\" + pathname + src.query + src.hash,\n        newUrl: \"\" + pathname + src.query + src.hash\n      });\n    }\n    return Promise.resolve({\n      type: \"redirect-external\",\n      destination: redirectTarget\n    });\n  }\n  return Promise.resolve({\n    type: \"next\"\n  });\n}\nasync function withMiddlewareEffects(options) {\n  const matches = await matchesMiddleware(options);\n  if (!matches || !options.fetchData) {\n    return null;\n  }\n  const data = await options.fetchData();\n  const effect = await getMiddlewareData(data.dataHref, data.response, options);\n  return {\n    dataHref: data.dataHref,\n    json: data.json,\n    response: data.response,\n    text: data.text,\n    cacheKey: data.cacheKey,\n    effect\n  };\n}\nconst manualScrollRestoration = process.env.__NEXT_SCROLL_RESTORATION && typeof window !== \"undefined\" && \"scrollRestoration\" in window.history && !!function () {\n  try {\n    let v = \"__next\";\n    // eslint-disable-next-line no-sequences\n    return sessionStorage.setItem(v, v), sessionStorage.removeItem(v), true;\n  } catch (n) {}\n}();\nconst SSG_DATA_NOT_FOUND = Symbol(\"SSG_DATA_NOT_FOUND\");\nfunction fetchRetry(url, attempts, options) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: \"same-origin\",\n    method: options.method || \"GET\",\n    headers: Object.assign({}, options.headers, {\n      \"x-nextjs-data\": \"1\"\n    })\n  }).then(response => {\n    return !response.ok && attempts > 1 && response.status >= 500 ? fetchRetry(url, attempts - 1, options) : response;\n  });\n}\nfunction tryToParseAsJSON(text) {\n  try {\n    return JSON.parse(text);\n  } catch (error) {\n    return null;\n  }\n}\nfunction fetchNextData(param) {\n  let {\n    dataHref,\n    inflightCache,\n    isPrefetch,\n    hasMiddleware,\n    isServerRender,\n    parseJSON,\n    persistCache,\n    isBackground,\n    unstable_skipClientCache\n  } = param;\n  const {\n    href: cacheKey\n  } = new URL(dataHref, window.location.href);\n  const getData = params => {\n    var _params_method;\n    return fetchRetry(dataHref, isServerRender ? 3 : 1, {\n      headers: Object.assign({}, isPrefetch ? {\n        purpose: \"prefetch\"\n      } : {}, isPrefetch && hasMiddleware ? {\n        \"x-middleware-prefetch\": \"1\"\n      } : {}),\n      method: (_params_method = params == null ? void 0 : params.method) != null ? _params_method : \"GET\"\n    }).then(response => {\n      if (response.ok && (params == null ? void 0 : params.method) === \"HEAD\") {\n        return {\n          dataHref,\n          response,\n          text: \"\",\n          json: {},\n          cacheKey\n        };\n      }\n      return response.text().then(text => {\n        if (!response.ok) {\n          /**\n          * When the data response is a redirect because of a middleware\n          * we do not consider it an error. The headers must bring the\n          * mapped location.\n          * TODO: Change the status code in the handler.\n          */\n          if (hasMiddleware && [301, 302, 307, 308].includes(response.status)) {\n            return {\n              dataHref,\n              response,\n              text,\n              json: {},\n              cacheKey\n            };\n          }\n          if (response.status === 404) {\n            var _tryToParseAsJSON;\n            if ((_tryToParseAsJSON = tryToParseAsJSON(text)) == null ? void 0 : _tryToParseAsJSON.notFound) {\n              return {\n                dataHref,\n                json: {\n                  notFound: SSG_DATA_NOT_FOUND\n                },\n                response,\n                text,\n                cacheKey\n              };\n            }\n          }\n          const error = new Error(\"Failed to load static props\");\n          /**\n          * We should only trigger a server-side transition if this was\n          * caused on a client-side transition. Otherwise, we'd get into\n          * an infinite loop.\n          */\n          if (!isServerRender) {\n            (0, _routeloader.markAssetError)(error);\n          }\n          throw error;\n        }\n        return {\n          dataHref,\n          json: parseJSON ? tryToParseAsJSON(text) : null,\n          response,\n          text,\n          cacheKey\n        };\n      });\n    }).then(data => {\n      if (!persistCache || process.env.NODE_ENV !== \"production\" || data.response.headers.get(\"x-middleware-cache\") === \"no-cache\") {\n        delete inflightCache[cacheKey];\n      }\n      return data;\n    }).catch(err => {\n      if (!unstable_skipClientCache) {\n        delete inflightCache[cacheKey];\n      }\n      if (\n      // chrome\n      err.message === \"Failed to fetch\" ||\n      // firefox\n      err.message === \"NetworkError when attempting to fetch resource.\" ||\n      // safari\n      err.message === \"Load failed\") {\n        (0, _routeloader.markAssetError)(err);\n      }\n      throw err;\n    });\n  };\n  // when skipping client cache we wait to update\n  // inflight cache until successful data response\n  // this allows racing click event with fetching newer data\n  // without blocking navigation when stale data is available\n  if (unstable_skipClientCache && persistCache) {\n    return getData({}).then(data => {\n      inflightCache[cacheKey] = Promise.resolve(data);\n      return data;\n    });\n  }\n  if (inflightCache[cacheKey] !== undefined) {\n    return inflightCache[cacheKey];\n  }\n  return inflightCache[cacheKey] = getData(isBackground ? {\n    method: \"HEAD\"\n  } : {});\n}\nfunction createKey() {\n  return Math.random().toString(36).slice(2, 10);\n}\nfunction handleHardNavigation(param) {\n  let {\n    url,\n    router\n  } = param;\n  // ensure we don't trigger a hard navigation to the same\n  // URL as this can end up with an infinite refresh\n  if (url === (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(router.asPath, router.locale))) {\n    throw new Error(\"Invariant: attempted to hard navigate to the same URL \" + url + \" \" + location.href);\n  }\n  window.location.href = url;\n}\nconst getCancelledHandler = param => {\n  let {\n    route,\n    router\n  } = param;\n  let cancelled = false;\n  const cancel = router.clc = () => {\n    cancelled = true;\n  };\n  const handleCancelled = () => {\n    if (cancelled) {\n      const error = new Error('Abort fetching component for route: \"' + route + '\"');\n      error.cancelled = true;\n      throw error;\n    }\n    if (cancel === router.clc) {\n      router.clc = null;\n    }\n  };\n  return handleCancelled;\n};\nclass Router {\n  reload() {\n    window.location.reload();\n  }\n  /**\n  * Go back in history\n  */\n  back() {\n    window.history.back();\n  }\n  /**\n  * Go forward in history\n  */\n  forward() {\n    window.history.forward();\n  }\n  /**\n  * Performs a `pushState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n  push(url, as, options) {\n    if (options === void 0) options = {};\n    if (process.env.__NEXT_SCROLL_RESTORATION) {\n      // TODO: remove in the future when we update history before route change\n      // is complete, as the popstate event should handle this capture.\n      if (manualScrollRestoration) {\n        try {\n          // Snapshot scroll position right before navigating to a new page:\n          sessionStorage.setItem(\"__next_scroll_\" + this._key, JSON.stringify({\n            x: self.pageXOffset,\n            y: self.pageYOffset\n          }));\n        } catch (e) {}\n      }\n    }\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change(\"pushState\", url, as, options);\n  }\n  /**\n  * Performs a `replaceState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n  replace(url, as, options) {\n    if (options === void 0) options = {};\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change(\"replaceState\", url, as, options);\n  }\n  async _bfl(as, resolvedAs, locale, skipNavigate) {\n    if (process.env.__NEXT_CLIENT_ROUTER_FILTER_ENABLED) {\n      let matchesBflStatic = false;\n      let matchesBflDynamic = false;\n      for (const curAs of [as, resolvedAs]) {\n        if (curAs) {\n          const asNoSlash = (0, _removetrailingslash.removeTrailingSlash)(new URL(curAs, \"http://n\").pathname);\n          const asNoSlashLocale = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(asNoSlash, locale || this.locale));\n          if (asNoSlash !== (0, _removetrailingslash.removeTrailingSlash)(new URL(this.asPath, \"http://n\").pathname)) {\n            var _this__bfl_s, _this__bfl_s1;\n            matchesBflStatic = matchesBflStatic || !!((_this__bfl_s = this._bfl_s) == null ? void 0 : _this__bfl_s.contains(asNoSlash)) || !!((_this__bfl_s1 = this._bfl_s) == null ? void 0 : _this__bfl_s1.contains(asNoSlashLocale));\n            for (const normalizedAS of [asNoSlash, asNoSlashLocale]) {\n              // if any sub-path of as matches a dynamic filter path\n              // it should be hard navigated\n              const curAsParts = normalizedAS.split(\"/\");\n              for (let i = 0; !matchesBflDynamic && i < curAsParts.length + 1; i++) {\n                var _this__bfl_d;\n                const currentPart = curAsParts.slice(0, i).join(\"/\");\n                if (currentPart && ((_this__bfl_d = this._bfl_d) == null ? void 0 : _this__bfl_d.contains(currentPart))) {\n                  matchesBflDynamic = true;\n                  break;\n                }\n              }\n            }\n            // if the client router filter is matched then we trigger\n            // a hard navigation\n            if (matchesBflStatic || matchesBflDynamic) {\n              if (skipNavigate) {\n                return true;\n              }\n              handleHardNavigation({\n                url: (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(as, locale || this.locale, this.defaultLocale)),\n                router: this\n              });\n              return new Promise(() => {});\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n  async change(method, url, as, options, forcedScroll) {\n    var _this_components_pathname;\n    if (!(0, _islocalurl.isLocalURL)(url)) {\n      handleHardNavigation({\n        url,\n        router: this\n      });\n      return false;\n    }\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n    const isQueryUpdating = options._h === 1;\n    if (!isQueryUpdating && !options.shallow) {\n      await this._bfl(as, undefined, options.locale);\n    }\n    let shouldResolveHref = isQueryUpdating || options._shouldResolveHref || (0, _parsepath.parsePath)(url).pathname === (0, _parsepath.parsePath)(as).pathname;\n    const nextState = {\n      ...this.state\n    };\n    // for static pages with query params in the URL we delay\n    // marking the router ready until after the query is updated\n    // or a navigation has occurred\n    const readyStateChange = this.isReady !== true;\n    this.isReady = true;\n    const isSsr = this.isSsr;\n    if (!isQueryUpdating) {\n      this.isSsr = false;\n    }\n    // if a route transition is already in progress before\n    // the query updating is triggered ignore query updating\n    if (isQueryUpdating && this.clc) {\n      return false;\n    }\n    const prevLocale = nextState.locale;\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      nextState.locale = options.locale === false ? this.defaultLocale : options.locale || nextState.locale;\n      if (typeof options.locale === \"undefined\") {\n        options.locale = nextState.locale;\n      }\n      const parsedAs = (0, _parserelativeurl.parseRelativeUrl)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as);\n      const localePathResult = (0, _normalizelocalepath.normalizeLocalePath)(parsedAs.pathname, this.locales);\n      if (localePathResult.detectedLocale) {\n        nextState.locale = localePathResult.detectedLocale;\n        parsedAs.pathname = (0, _addbasepath.addBasePath)(parsedAs.pathname);\n        as = (0, _formaturl.formatWithValidation)(parsedAs);\n        url = (0, _addbasepath.addBasePath)((0, _normalizelocalepath.normalizeLocalePath)((0, _hasbasepath.hasBasePath)(url) ? (0, _removebasepath.removeBasePath)(url) : url, this.locales).pathname);\n      }\n      let didNavigate = false;\n      // we need to wrap this in the env check again since regenerator runtime\n      // moves this on its own due to the return\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        var _this_locales;\n        // if the locale isn't configured hard navigate to show 404 page\n        if (!((_this_locales = this.locales) == null ? void 0 : _this_locales.includes(nextState.locale))) {\n          parsedAs.pathname = (0, _addlocale.addLocale)(parsedAs.pathname, nextState.locale);\n          handleHardNavigation({\n            url: (0, _formaturl.formatWithValidation)(parsedAs),\n            router: this\n          });\n          // this was previously a return but was removed in favor\n          // of better dead code elimination with regenerator runtime\n          didNavigate = true;\n        }\n      }\n      const detectedDomain = (0, _detectdomainlocale.detectDomainLocale)(this.domainLocales, undefined, nextState.locale);\n      // we need to wrap this in the env check again since regenerator runtime\n      // moves this on its own due to the return\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        // if we are navigating to a domain locale ensure we redirect to the\n        // correct domain\n        if (!didNavigate && detectedDomain && this.isLocaleDomain && self.location.hostname !== detectedDomain.domain) {\n          const asNoBasePath = (0, _removebasepath.removeBasePath)(as);\n          handleHardNavigation({\n            url: \"http\" + (detectedDomain.http ? \"\" : \"s\") + \"://\" + detectedDomain.domain + (0, _addbasepath.addBasePath)(\"\" + (nextState.locale === detectedDomain.defaultLocale ? \"\" : \"/\" + nextState.locale) + (asNoBasePath === \"/\" ? \"\" : asNoBasePath) || \"/\"),\n            router: this\n          });\n          // this was previously a return but was removed in favor\n          // of better dead code elimination with regenerator runtime\n          didNavigate = true;\n        }\n      }\n      if (didNavigate) {\n        return new Promise(() => {});\n      }\n    }\n    // marking route changes as a navigation start entry\n    if (_utils.ST) {\n      performance.mark(\"routeChange\");\n    }\n    const {\n      shallow = false,\n      scroll = true\n    } = options;\n    const routeProps = {\n      shallow\n    };\n    if (this._inFlightRoute && this.clc) {\n      if (!isSsr) {\n        Router.events.emit(\"routeChangeError\", buildCancellationError(), this._inFlightRoute, routeProps);\n      }\n      this.clc();\n      this.clc = null;\n    }\n    as = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as, options.locale, this.defaultLocale));\n    const cleanedAs = (0, _removelocale.removeLocale)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as, nextState.locale);\n    this._inFlightRoute = as;\n    const localeChange = prevLocale !== nextState.locale;\n    // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n    if (!isQueryUpdating && this.onlyAHashChange(cleanedAs) && !localeChange) {\n      nextState.asPath = cleanedAs;\n      Router.events.emit(\"hashChangeStart\", as, routeProps);\n      // TODO: do we need the resolved href when only a hash change?\n      this.changeState(method, url, as, {\n        ...options,\n        scroll: false\n      });\n      if (scroll) {\n        this.scrollToHash(cleanedAs);\n      }\n      try {\n        await this.set(nextState, this.components[nextState.route], null);\n      } catch (err) {\n        if ((0, _iserror.default)(err) && err.cancelled) {\n          Router.events.emit(\"routeChangeError\", err, cleanedAs, routeProps);\n        }\n        throw err;\n      }\n      Router.events.emit(\"hashChangeComplete\", as, routeProps);\n      return true;\n    }\n    let parsed = (0, _parserelativeurl.parseRelativeUrl)(url);\n    let {\n      pathname,\n      query\n    } = parsed;\n    // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n    let pages, rewrites;\n    try {\n      [pages, {\n        __rewrites: rewrites\n      }] = await Promise.all([this.pageLoader.getPageList(), (0, _routeloader.getClientBuildManifest)(), this.pageLoader.getMiddleware()]);\n    } catch (err) {\n      // If we fail to resolve the page list or client-build manifest, we must\n      // do a server-side transition:\n      handleHardNavigation({\n        url: as,\n        router: this\n      });\n      return false;\n    }\n    // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n    if (!this.urlIsNew(cleanedAs) && !localeChange) {\n      method = \"replaceState\";\n    }\n    // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n    let resolvedAs = as;\n    // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n    pathname = pathname ? (0, _removetrailingslash.removeTrailingSlash)((0, _removebasepath.removeBasePath)(pathname)) : pathname;\n    let route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n    const parsedAsPathname = as.startsWith(\"/\") && (0, _parserelativeurl.parseRelativeUrl)(as).pathname;\n    // if we detected the path as app route during prefetching\n    // trigger hard navigation\n    if ((_this_components_pathname = this.components[pathname]) == null ? void 0 : _this_components_pathname.__appRouter) {\n      handleHardNavigation({\n        url: as,\n        router: this\n      });\n      return new Promise(() => {});\n    }\n    const isMiddlewareRewrite = !!(parsedAsPathname && route !== parsedAsPathname && (!(0, _isdynamic.isDynamicRoute)(route) || !(0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(route))(parsedAsPathname)));\n    // we don't attempt resolve asPath when we need to execute\n    // middleware as the resolving will occur server-side\n    const isMiddlewareMatch = !options.shallow && (await matchesMiddleware({\n      asPath: as,\n      locale: nextState.locale,\n      router: this\n    }));\n    if (isQueryUpdating && isMiddlewareMatch) {\n      shouldResolveHref = false;\n    }\n    if (shouldResolveHref && pathname !== \"/_error\") {\n      options._shouldResolveHref = true;\n      if (process.env.__NEXT_HAS_REWRITES && as.startsWith(\"/\")) {\n        const rewritesResult = (0, _resolverewrites.default)((0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(cleanedAs, nextState.locale), true), pages, rewrites, query, p => resolveDynamicRoute(p, pages), this.locales);\n        if (rewritesResult.externalDest) {\n          handleHardNavigation({\n            url: as,\n            router: this\n          });\n          return true;\n        }\n        if (!isMiddlewareMatch) {\n          resolvedAs = rewritesResult.asPath;\n        }\n        if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n          // if this directly matches a page we need to update the href to\n          // allow the correct page chunk to be loaded\n          pathname = rewritesResult.resolvedHref;\n          parsed.pathname = (0, _addbasepath.addBasePath)(pathname);\n          if (!isMiddlewareMatch) {\n            url = (0, _formaturl.formatWithValidation)(parsed);\n          }\n        }\n      } else {\n        parsed.pathname = resolveDynamicRoute(pathname, pages);\n        if (parsed.pathname !== pathname) {\n          pathname = parsed.pathname;\n          parsed.pathname = (0, _addbasepath.addBasePath)(pathname);\n          if (!isMiddlewareMatch) {\n            url = (0, _formaturl.formatWithValidation)(parsed);\n          }\n        }\n      }\n    }\n    if (!(0, _islocalurl.isLocalURL)(as)) {\n      if (process.env.NODE_ENV !== \"production\") {\n        throw new Error('Invalid href: \"' + url + '\" and as: \"' + as + '\", received relative href and external as' + \"\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as\");\n      }\n      handleHardNavigation({\n        url: as,\n        router: this\n      });\n      return false;\n    }\n    resolvedAs = (0, _removelocale.removeLocale)((0, _removebasepath.removeBasePath)(resolvedAs), nextState.locale);\n    route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n    let routeMatch = false;\n    if ((0, _isdynamic.isDynamicRoute)(route)) {\n      const parsedAs = (0, _parserelativeurl.parseRelativeUrl)(resolvedAs);\n      const asPathname = parsedAs.pathname;\n      const routeRegex = (0, _routeregex.getRouteRegex)(route);\n      routeMatch = (0, _routematcher.getRouteMatcher)(routeRegex)(asPathname);\n      const shouldInterpolate = route === asPathname;\n      const interpolatedAs = shouldInterpolate ? (0, _interpolateas.interpolateAs)(route, asPathname, query) : {};\n      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param] && !routeRegex.groups[param].optional);\n        if (missingParams.length > 0 && !isMiddlewareMatch) {\n          if (process.env.NODE_ENV !== \"production\") {\n            console.warn(\"\" + (shouldInterpolate ? \"Interpolating href\" : \"Mismatching `as` and `href`\") + \" failed to manually provide \" + (\"the params: \" + missingParams.join(\", \") + \" in the `href`'s `query`\"));\n          }\n          throw new Error((shouldInterpolate ? \"The provided `href` (\" + url + \") value is missing query values (\" + missingParams.join(\", \") + \") to be interpolated properly. \" : \"The provided `as` value (\" + asPathname + \") is incompatible with the `href` value (\" + route + \"). \") + (\"Read more: https://nextjs.org/docs/messages/\" + (shouldInterpolate ? \"href-interpolation-failed\" : \"incompatible-href-as\")));\n        }\n      } else if (shouldInterpolate) {\n        as = (0, _formaturl.formatWithValidation)(Object.assign({}, parsedAs, {\n          pathname: interpolatedAs.result,\n          query: (0, _omit.omit)(query, interpolatedAs.params)\n        }));\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch);\n      }\n    }\n    if (!isQueryUpdating) {\n      Router.events.emit(\"routeChangeStart\", as, routeProps);\n    }\n    const isErrorRoute = this.pathname === \"/404\" || this.pathname === \"/_error\";\n    try {\n      var _self___NEXT_DATA___props_pageProps, _self___NEXT_DATA___props, _routeInfo_props;\n      let routeInfo = await this.getRouteInfo({\n        route,\n        pathname,\n        query,\n        as,\n        resolvedAs,\n        routeProps,\n        locale: nextState.locale,\n        isPreview: nextState.isPreview,\n        hasMiddleware: isMiddlewareMatch,\n        unstable_skipClientCache: options.unstable_skipClientCache,\n        isQueryUpdating: isQueryUpdating && !this.isFallback,\n        isMiddlewareRewrite\n      });\n      if (!isQueryUpdating && !options.shallow) {\n        await this._bfl(as, \"resolvedAs\" in routeInfo ? routeInfo.resolvedAs : undefined, nextState.locale);\n      }\n      if (\"route\" in routeInfo && isMiddlewareMatch) {\n        pathname = routeInfo.route || route;\n        route = pathname;\n        if (!routeProps.shallow) {\n          query = Object.assign({}, routeInfo.query || {}, query);\n        }\n        const cleanedParsedPathname = (0, _hasbasepath.hasBasePath)(parsed.pathname) ? (0, _removebasepath.removeBasePath)(parsed.pathname) : parsed.pathname;\n        if (routeMatch && pathname !== cleanedParsedPathname) {\n          Object.keys(routeMatch).forEach(key => {\n            if (routeMatch && query[key] === routeMatch[key]) {\n              delete query[key];\n            }\n          });\n        }\n        if ((0, _isdynamic.isDynamicRoute)(pathname)) {\n          const prefixedAs = !routeProps.shallow && routeInfo.resolvedAs ? routeInfo.resolvedAs : (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(new URL(as, location.href).pathname, nextState.locale), true);\n          let rewriteAs = prefixedAs;\n          if ((0, _hasbasepath.hasBasePath)(rewriteAs)) {\n            rewriteAs = (0, _removebasepath.removeBasePath)(rewriteAs);\n          }\n          if (process.env.__NEXT_I18N_SUPPORT) {\n            const localeResult = (0, _normalizelocalepath.normalizeLocalePath)(rewriteAs, this.locales);\n            nextState.locale = localeResult.detectedLocale || nextState.locale;\n            rewriteAs = localeResult.pathname;\n          }\n          const routeRegex = (0, _routeregex.getRouteRegex)(pathname);\n          const curRouteMatch = (0, _routematcher.getRouteMatcher)(routeRegex)(new URL(rewriteAs, location.href).pathname);\n          if (curRouteMatch) {\n            Object.assign(query, curRouteMatch);\n          }\n        }\n      }\n      // If the routeInfo brings a redirect we simply apply it.\n      if (\"type\" in routeInfo) {\n        if (routeInfo.type === \"redirect-internal\") {\n          return this.change(method, routeInfo.newUrl, routeInfo.newAs, options);\n        } else {\n          handleHardNavigation({\n            url: routeInfo.destination,\n            router: this\n          });\n          return new Promise(() => {});\n        }\n      }\n      const component = routeInfo.Component;\n      if (component && component.unstable_scriptLoader) {\n        const scripts = [].concat(component.unstable_scriptLoader());\n        scripts.forEach(script => {\n          (0, _script.handleClientScriptLoad)(script.props);\n        });\n      }\n      // handle redirect on client-transition\n      if ((routeInfo.__N_SSG || routeInfo.__N_SSP) && routeInfo.props) {\n        if (routeInfo.props.pageProps && routeInfo.props.pageProps.__N_REDIRECT) {\n          // Use the destination from redirect without adding locale\n          options.locale = false;\n          const destination = routeInfo.props.pageProps.__N_REDIRECT;\n          // check if destination is internal (resolves to a page) and attempt\n          // client-navigation if it is falling back to hard navigation if\n          // it's not\n          if (destination.startsWith(\"/\") && routeInfo.props.pageProps.__N_REDIRECT_BASE_PATH !== false) {\n            const parsedHref = (0, _parserelativeurl.parseRelativeUrl)(destination);\n            parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n            const {\n              url: newUrl,\n              as: newAs\n            } = prepareUrlAs(this, destination, destination);\n            return this.change(method, newUrl, newAs, options);\n          }\n          handleHardNavigation({\n            url: destination,\n            router: this\n          });\n          return new Promise(() => {});\n        }\n        nextState.isPreview = !!routeInfo.props.__N_PREVIEW;\n        // handle SSG data 404\n        if (routeInfo.props.notFound === SSG_DATA_NOT_FOUND) {\n          let notFoundRoute;\n          try {\n            await this.fetchComponent(\"/404\");\n            notFoundRoute = \"/404\";\n          } catch (_) {\n            notFoundRoute = \"/_error\";\n          }\n          routeInfo = await this.getRouteInfo({\n            route: notFoundRoute,\n            pathname: notFoundRoute,\n            query,\n            as,\n            resolvedAs,\n            routeProps: {\n              shallow: false\n            },\n            locale: nextState.locale,\n            isPreview: nextState.isPreview,\n            isNotFound: true\n          });\n          if (\"type\" in routeInfo) {\n            throw new Error(\"Unexpected middleware effect on /404\");\n          }\n        }\n      }\n      if (isQueryUpdating && this.pathname === \"/_error\" && ((_self___NEXT_DATA___props = self.__NEXT_DATA__.props) == null ? void 0 : (_self___NEXT_DATA___props_pageProps = _self___NEXT_DATA___props.pageProps) == null ? void 0 : _self___NEXT_DATA___props_pageProps.statusCode) === 500 && ((_routeInfo_props = routeInfo.props) == null ? void 0 : _routeInfo_props.pageProps)) {\n        // ensure statusCode is still correct for static 500 page\n        // when updating query information\n        routeInfo.props.pageProps.statusCode = 500;\n      }\n      var _routeInfo_route;\n      // shallow routing is only allowed for same page URL changes.\n      const isValidShallowRoute = options.shallow && nextState.route === ((_routeInfo_route = routeInfo.route) != null ? _routeInfo_route : route);\n      var _options_scroll;\n      const shouldScroll = (_options_scroll = options.scroll) != null ? _options_scroll : !isQueryUpdating && !isValidShallowRoute;\n      const resetScroll = shouldScroll ? {\n        x: 0,\n        y: 0\n      } : null;\n      const upcomingScrollState = forcedScroll != null ? forcedScroll : resetScroll;\n      // the new state that the router gonna set\n      const upcomingRouterState = {\n        ...nextState,\n        route,\n        pathname,\n        query,\n        asPath: cleanedAs,\n        isFallback: false\n      };\n      // When the page being rendered is the 404 page, we should only update the\n      // query parameters. Route changes here might add the basePath when it\n      // wasn't originally present. This is also why this block is before the\n      // below `changeState` call which updates the browser's history (changing\n      // the URL).\n      if (isQueryUpdating && isErrorRoute) {\n        var _self___NEXT_DATA___props_pageProps1, _self___NEXT_DATA___props1, _routeInfo_props1;\n        routeInfo = await this.getRouteInfo({\n          route: this.pathname,\n          pathname: this.pathname,\n          query,\n          as,\n          resolvedAs,\n          routeProps: {\n            shallow: false\n          },\n          locale: nextState.locale,\n          isPreview: nextState.isPreview,\n          isQueryUpdating: isQueryUpdating && !this.isFallback\n        });\n        if (\"type\" in routeInfo) {\n          throw new Error(\"Unexpected middleware effect on \" + this.pathname);\n        }\n        if (this.pathname === \"/_error\" && ((_self___NEXT_DATA___props1 = self.__NEXT_DATA__.props) == null ? void 0 : (_self___NEXT_DATA___props_pageProps1 = _self___NEXT_DATA___props1.pageProps) == null ? void 0 : _self___NEXT_DATA___props_pageProps1.statusCode) === 500 && ((_routeInfo_props1 = routeInfo.props) == null ? void 0 : _routeInfo_props1.pageProps)) {\n          // ensure statusCode is still correct for static 500 page\n          // when updating query information\n          routeInfo.props.pageProps.statusCode = 500;\n        }\n        try {\n          await this.set(upcomingRouterState, routeInfo, upcomingScrollState);\n        } catch (err) {\n          if ((0, _iserror.default)(err) && err.cancelled) {\n            Router.events.emit(\"routeChangeError\", err, cleanedAs, routeProps);\n          }\n          throw err;\n        }\n        return true;\n      }\n      Router.events.emit(\"beforeHistoryChange\", as, routeProps);\n      this.changeState(method, url, as, options);\n      // for query updates we can skip it if the state is unchanged and we don't\n      // need to scroll\n      // https://github.com/vercel/next.js/issues/37139\n      const canSkipUpdating = isQueryUpdating && !upcomingScrollState && !readyStateChange && !localeChange && (0, _comparestates.compareRouterStates)(upcomingRouterState, this.state);\n      if (!canSkipUpdating) {\n        try {\n          await this.set(upcomingRouterState, routeInfo, upcomingScrollState);\n        } catch (e) {\n          if (e.cancelled) routeInfo.error = routeInfo.error || e;else throw e;\n        }\n        if (routeInfo.error) {\n          if (!isQueryUpdating) {\n            Router.events.emit(\"routeChangeError\", routeInfo.error, cleanedAs, routeProps);\n          }\n          throw routeInfo.error;\n        }\n        if (process.env.__NEXT_I18N_SUPPORT) {\n          if (nextState.locale) {\n            document.documentElement.lang = nextState.locale;\n          }\n        }\n        if (!isQueryUpdating) {\n          Router.events.emit(\"routeChangeComplete\", as, routeProps);\n        }\n        // A hash mark # is the optional last part of a URL\n        const hashRegex = /#.+$/;\n        if (shouldScroll && hashRegex.test(as)) {\n          this.scrollToHash(as);\n        }\n      }\n      return true;\n    } catch (err) {\n      if ((0, _iserror.default)(err) && err.cancelled) {\n        return false;\n      }\n      throw err;\n    }\n  }\n  changeState(method, url, as, options) {\n    if (options === void 0) options = {};\n    if (process.env.NODE_ENV !== \"production\") {\n      if (typeof window.history === \"undefined\") {\n        console.error(\"Warning: window.history is not available.\");\n        return;\n      }\n      if (typeof window.history[method] === \"undefined\") {\n        console.error(\"Warning: window.history.\" + method + \" is not available\");\n        return;\n      }\n    }\n    if (method !== \"pushState\" || (0, _utils.getURL)() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true,\n        key: this._key = method !== \"pushState\" ? this._key : createKey()\n      },\n      // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/docs/Web/API/History/replaceState\n      \"\", as);\n    }\n  }\n  async handleRouteInfoError(err, pathname, query, as, routeProps, loadErrorFail) {\n    console.error(err);\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err;\n    }\n    if ((0, _routeloader.isAssetError)(err) || loadErrorFail) {\n      Router.events.emit(\"routeChangeError\", err, as, routeProps);\n      // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n      // So, doing a hard reload is the proper way to deal with this.\n      handleHardNavigation({\n        url: as,\n        router: this\n      });\n      // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n      throw buildCancellationError();\n    }\n    try {\n      let props;\n      const {\n        page: Component,\n        styleSheets\n      } = await this.fetchComponent(\"/_error\");\n      const routeInfo = {\n        props,\n        Component,\n        styleSheets,\n        err,\n        error: err\n      };\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component, {\n            err,\n            pathname,\n            query\n          });\n        } catch (gipErr) {\n          console.error(\"Error in error page `getInitialProps`: \", gipErr);\n          routeInfo.props = {};\n        }\n      }\n      return routeInfo;\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError((0, _iserror.default)(routeInfoErr) ? routeInfoErr : new Error(routeInfoErr + \"\"), pathname, query, as, routeProps, true);\n    }\n  }\n  async getRouteInfo(param) {\n    let {\n      route: requestedRoute,\n      pathname,\n      query,\n      as,\n      resolvedAs,\n      routeProps,\n      locale,\n      hasMiddleware,\n      isPreview,\n      unstable_skipClientCache,\n      isQueryUpdating,\n      isMiddlewareRewrite,\n      isNotFound\n    } = param;\n    /**\n    * This `route` binding can change if there's a rewrite\n    * so we keep a reference to the original requested route\n    * so we can store the cache for it and avoid re-requesting every time\n    * for shallow routing purposes.\n    */\n    let route = requestedRoute;\n    try {\n      var _data_effect, _data_effect1, _data_effect2, _data_response;\n      let existingInfo = this.components[route];\n      if (routeProps.shallow && existingInfo && this.route === route) {\n        return existingInfo;\n      }\n      const handleCancelled = getCancelledHandler({\n        route,\n        router: this\n      });\n      if (hasMiddleware) {\n        existingInfo = undefined;\n      }\n      let cachedRouteInfo = existingInfo && !(\"initial\" in existingInfo) && process.env.NODE_ENV !== \"development\" ? existingInfo : undefined;\n      const isBackground = isQueryUpdating;\n      const fetchNextDataParams = {\n        dataHref: this.pageLoader.getDataHref({\n          href: (0, _formaturl.formatWithValidation)({\n            pathname,\n            query\n          }),\n          skipInterpolation: true,\n          asPath: isNotFound ? \"/404\" : resolvedAs,\n          locale\n        }),\n        hasMiddleware: true,\n        isServerRender: this.isSsr,\n        parseJSON: true,\n        inflightCache: isBackground ? this.sbc : this.sdc,\n        persistCache: !isPreview,\n        isPrefetch: false,\n        unstable_skipClientCache,\n        isBackground\n      };\n      let data = isQueryUpdating && !isMiddlewareRewrite ? null : await withMiddlewareEffects({\n        fetchData: () => fetchNextData(fetchNextDataParams),\n        asPath: isNotFound ? \"/404\" : resolvedAs,\n        locale: locale,\n        router: this\n      }).catch(err => {\n        // we don't hard error during query updating\n        // as it's un-necessary and doesn't need to be fatal\n        // unless it is a fallback route and the props can't\n        // be loaded\n        if (isQueryUpdating) {\n          return null;\n        }\n        throw err;\n      });\n      // when rendering error routes we don't apply middleware\n      // effects\n      if (data && (pathname === \"/_error\" || pathname === \"/404\")) {\n        data.effect = undefined;\n      }\n      if (isQueryUpdating) {\n        if (!data) {\n          data = {\n            json: self.__NEXT_DATA__.props\n          };\n        } else {\n          data.json = self.__NEXT_DATA__.props;\n        }\n      }\n      handleCancelled();\n      if ((data == null ? void 0 : (_data_effect = data.effect) == null ? void 0 : _data_effect.type) === \"redirect-internal\" || (data == null ? void 0 : (_data_effect1 = data.effect) == null ? void 0 : _data_effect1.type) === \"redirect-external\") {\n        return data.effect;\n      }\n      if ((data == null ? void 0 : (_data_effect2 = data.effect) == null ? void 0 : _data_effect2.type) === \"rewrite\") {\n        const resolvedRoute = (0, _removetrailingslash.removeTrailingSlash)(data.effect.resolvedHref);\n        const pages = await this.pageLoader.getPageList();\n        // during query updating the page must match although during\n        // client-transition a redirect that doesn't match a page\n        // can be returned and this should trigger a hard navigation\n        // which is valid for incremental migration\n        if (!isQueryUpdating || pages.includes(resolvedRoute)) {\n          route = resolvedRoute;\n          pathname = data.effect.resolvedHref;\n          query = {\n            ...query,\n            ...data.effect.parsedAs.query\n          };\n          resolvedAs = (0, _removebasepath.removeBasePath)((0, _normalizelocalepath.normalizeLocalePath)(data.effect.parsedAs.pathname, this.locales).pathname);\n          // Check again the cache with the new destination.\n          existingInfo = this.components[route];\n          if (routeProps.shallow && existingInfo && this.route === route && !hasMiddleware) {\n            // If we have a match with the current route due to rewrite,\n            // we can copy the existing information to the rewritten one.\n            // Then, we return the information along with the matched route.\n            return {\n              ...existingInfo,\n              route\n            };\n          }\n        }\n      }\n      if ((0, _isapiroute.isAPIRoute)(route)) {\n        handleHardNavigation({\n          url: as,\n          router: this\n        });\n        return new Promise(() => {});\n      }\n      const routeInfo = cachedRouteInfo || (await this.fetchComponent(route).then(res => ({\n        Component: res.page,\n        styleSheets: res.styleSheets,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP\n      })));\n      if (process.env.NODE_ENV !== \"production\") {\n        const {\n          isValidElementType\n        } = require(\"next/dist/compiled/react-is\");\n        if (!isValidElementType(routeInfo.Component)) {\n          throw new Error('The default export is not a React Component in page: \"' + pathname + '\"');\n        }\n      }\n      const wasBailedPrefetch = data == null ? void 0 : (_data_response = data.response) == null ? void 0 : _data_response.headers.get(\"x-middleware-skip\");\n      const shouldFetchData = routeInfo.__N_SSG || routeInfo.__N_SSP;\n      // For non-SSG prefetches that bailed before sending data\n      // we clear the cache to fetch full response\n      if (wasBailedPrefetch && (data == null ? void 0 : data.dataHref)) {\n        delete this.sdc[data.dataHref];\n      }\n      const {\n        props,\n        cacheKey\n      } = await this._getData(async () => {\n        if (shouldFetchData) {\n          if ((data == null ? void 0 : data.json) && !wasBailedPrefetch) {\n            return {\n              cacheKey: data.cacheKey,\n              props: data.json\n            };\n          }\n          const dataHref = (data == null ? void 0 : data.dataHref) ? data.dataHref : this.pageLoader.getDataHref({\n            href: (0, _formaturl.formatWithValidation)({\n              pathname,\n              query\n            }),\n            asPath: resolvedAs,\n            locale\n          });\n          const fetched = await fetchNextData({\n            dataHref,\n            isServerRender: this.isSsr,\n            parseJSON: true,\n            inflightCache: wasBailedPrefetch ? {} : this.sdc,\n            persistCache: !isPreview,\n            isPrefetch: false,\n            unstable_skipClientCache\n          });\n          return {\n            cacheKey: fetched.cacheKey,\n            props: fetched.json || {}\n          };\n        }\n        return {\n          headers: {},\n          props: await this.getInitialProps(routeInfo.Component,\n          // we provide AppTree later so this needs to be `any`\n          {\n            pathname,\n            query,\n            asPath: as,\n            locale,\n            locales: this.locales,\n            defaultLocale: this.defaultLocale\n          })\n        };\n      });\n      // Only bust the data cache for SSP routes although\n      // middleware can skip cache per request with\n      // x-middleware-cache: no-cache as well\n      if (routeInfo.__N_SSP && fetchNextDataParams.dataHref && cacheKey) {\n        delete this.sdc[cacheKey];\n      }\n      // we kick off a HEAD request in the background\n      // when a non-prefetch request is made to signal revalidation\n      if (!this.isPreview && routeInfo.__N_SSG && process.env.NODE_ENV !== \"development\" && !isQueryUpdating) {\n        fetchNextData(Object.assign({}, fetchNextDataParams, {\n          isBackground: true,\n          persistCache: false,\n          inflightCache: this.sbc\n        })).catch(() => {});\n      }\n      props.pageProps = Object.assign({}, props.pageProps);\n      routeInfo.props = props;\n      routeInfo.route = route;\n      routeInfo.query = query;\n      routeInfo.resolvedAs = resolvedAs;\n      this.components[route] = routeInfo;\n      return routeInfo;\n    } catch (err) {\n      return this.handleRouteInfoError((0, _iserror.getProperError)(err), pathname, query, as, routeProps);\n    }\n  }\n  set(state, data, resetScroll) {\n    this.state = state;\n    return this.sub(data, this.components[\"/_app\"].Component, resetScroll);\n  }\n  /**\n  * Callback to execute before replacing router state\n  * @param cb callback to be executed\n  */\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split(\"#\", 2);\n    const [newUrlNoHash, newHash] = as.split(\"#\", 2);\n    // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    }\n    // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    }\n    // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash;\n  }\n  scrollToHash(as) {\n    const [, hash = \"\"] = as.split(\"#\", 2);\n    (0, _handlesmoothscroll.handleSmoothScroll)(() => {\n      // Scroll to top if the hash is just `#` with no value or `#top`\n      // To mirror browsers\n      if (hash === \"\" || hash === \"top\") {\n        window.scrollTo(0, 0);\n        return;\n      }\n      // Decode hash to make non-latin anchor works.\n      const rawHash = decodeURIComponent(hash);\n      // First we check if the element by id is found\n      const idEl = document.getElementById(rawHash);\n      if (idEl) {\n        idEl.scrollIntoView();\n        return;\n      }\n      // If there's no element with the id, we check the `name` property\n      // To mirror browsers\n      const nameEl = document.getElementsByName(rawHash)[0];\n      if (nameEl) {\n        nameEl.scrollIntoView();\n      }\n    }, {\n      onlyHashChange: this.onlyAHashChange(as)\n    });\n  }\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  /**\n  * Prefetch page code, you may wait for the data during page rendering.\n  * This feature only works in production!\n  * @param url the href of prefetched page\n  * @param asPath the as path of the prefetched page\n  */\n  async prefetch(url, asPath, options) {\n    if (asPath === void 0) asPath = url;\n    if (options === void 0) options = {};\n    // Prefetch is not supported in development mode because it would trigger on-demand-entries\n    if (process.env.NODE_ENV !== \"production\") {\n      return;\n    }\n    if (typeof window !== \"undefined\" && (0, _isbot.isBot)(window.navigator.userAgent)) {\n      // No prefetches for bots that render the link since they are typically navigating\n      // links via the equivalent of a hard navigation and hence never utilize these\n      // prefetches.\n      return;\n    }\n    let parsed = (0, _parserelativeurl.parseRelativeUrl)(url);\n    const urlPathname = parsed.pathname;\n    let {\n      pathname,\n      query\n    } = parsed;\n    const originalPathname = pathname;\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      if (options.locale === false) {\n        pathname = (0, _normalizelocalepath.normalizeLocalePath)(pathname, this.locales).pathname;\n        parsed.pathname = pathname;\n        url = (0, _formaturl.formatWithValidation)(parsed);\n        let parsedAs = (0, _parserelativeurl.parseRelativeUrl)(asPath);\n        const localePathResult = (0, _normalizelocalepath.normalizeLocalePath)(parsedAs.pathname, this.locales);\n        parsedAs.pathname = localePathResult.pathname;\n        options.locale = localePathResult.detectedLocale || this.defaultLocale;\n        asPath = (0, _formaturl.formatWithValidation)(parsedAs);\n      }\n    }\n    const pages = await this.pageLoader.getPageList();\n    let resolvedAs = asPath;\n    const locale = typeof options.locale !== \"undefined\" ? options.locale || undefined : this.locale;\n    const isMiddlewareMatch = await matchesMiddleware({\n      asPath: asPath,\n      locale: locale,\n      router: this\n    });\n    if (process.env.__NEXT_HAS_REWRITES && asPath.startsWith(\"/\")) {\n      let rewrites;\n      ({\n        __rewrites: rewrites\n      } = await (0, _routeloader.getClientBuildManifest)());\n      const rewritesResult = (0, _resolverewrites.default)((0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(asPath, this.locale), true), pages, rewrites, parsed.query, p => resolveDynamicRoute(p, pages), this.locales);\n      if (rewritesResult.externalDest) {\n        return;\n      }\n      if (!isMiddlewareMatch) {\n        resolvedAs = (0, _removelocale.removeLocale)((0, _removebasepath.removeBasePath)(rewritesResult.asPath), this.locale);\n      }\n      if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n        // if this directly matches a page we need to update the href to\n        // allow the correct page chunk to be loaded\n        pathname = rewritesResult.resolvedHref;\n        parsed.pathname = pathname;\n        if (!isMiddlewareMatch) {\n          url = (0, _formaturl.formatWithValidation)(parsed);\n        }\n      }\n    }\n    parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n    if ((0, _isdynamic.isDynamicRoute)(parsed.pathname)) {\n      pathname = parsed.pathname;\n      parsed.pathname = pathname;\n      Object.assign(query, (0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(parsed.pathname))((0, _parsepath.parsePath)(asPath).pathname) || {});\n      if (!isMiddlewareMatch) {\n        url = (0, _formaturl.formatWithValidation)(parsed);\n      }\n    }\n    const data = process.env.__NEXT_MIDDLEWARE_PREFETCH === \"strict\" ? null : await withMiddlewareEffects({\n      fetchData: () => fetchNextData({\n        dataHref: this.pageLoader.getDataHref({\n          href: (0, _formaturl.formatWithValidation)({\n            pathname: originalPathname,\n            query\n          }),\n          skipInterpolation: true,\n          asPath: resolvedAs,\n          locale\n        }),\n        hasMiddleware: true,\n        isServerRender: false,\n        parseJSON: true,\n        inflightCache: this.sdc,\n        persistCache: !this.isPreview,\n        isPrefetch: true\n      }),\n      asPath: asPath,\n      locale: locale,\n      router: this\n    });\n    /**\n    * If there was a rewrite we apply the effects of the rewrite on the\n    * current parameters for the prefetch.\n    */\n    if ((data == null ? void 0 : data.effect.type) === \"rewrite\") {\n      parsed.pathname = data.effect.resolvedHref;\n      pathname = data.effect.resolvedHref;\n      query = {\n        ...query,\n        ...data.effect.parsedAs.query\n      };\n      resolvedAs = data.effect.parsedAs.pathname;\n      url = (0, _formaturl.formatWithValidation)(parsed);\n    }\n    /**\n    * If there is a redirect to an external destination then we don't have\n    * to prefetch content as it will be unused.\n    */\n    if ((data == null ? void 0 : data.effect.type) === \"redirect-external\") {\n      return;\n    }\n    const route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n    if (await this._bfl(asPath, resolvedAs, options.locale, true)) {\n      this.components[urlPathname] = {\n        __appRouter: true\n      };\n    }\n    await Promise.all([this.pageLoader._isSsg(route).then(isSsg => {\n      return isSsg ? fetchNextData({\n        dataHref: (data == null ? void 0 : data.json) ? data == null ? void 0 : data.dataHref : this.pageLoader.getDataHref({\n          href: url,\n          asPath: resolvedAs,\n          locale: locale\n        }),\n        isServerRender: false,\n        parseJSON: true,\n        inflightCache: this.sdc,\n        persistCache: !this.isPreview,\n        isPrefetch: true,\n        unstable_skipClientCache: options.unstable_skipClientCache || options.priority && !!process.env.__NEXT_OPTIMISTIC_CLIENT_CACHE\n      }).then(() => false).catch(() => false) : false;\n    }), this.pageLoader[options.priority ? \"loadPage\" : \"prefetch\"](route)]);\n  }\n  async fetchComponent(route) {\n    const handleCancelled = getCancelledHandler({\n      route,\n      router: this\n    });\n    try {\n      const componentResult = await this.pageLoader.loadPage(route);\n      handleCancelled();\n      return componentResult;\n    } catch (err) {\n      handleCancelled();\n      throw err;\n    }\n  }\n  _getData(fn) {\n    let cancelled = false;\n    const cancel = () => {\n      cancelled = true;\n    };\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n      if (cancelled) {\n        const err = new Error(\"Loading initial props cancelled\");\n        err.cancelled = true;\n        throw err;\n      }\n      return data;\n    });\n  }\n  _getFlightData(dataHref) {\n    // Do not cache RSC flight response since it's not a static resource\n    return fetchNextData({\n      dataHref,\n      isServerRender: true,\n      parseJSON: false,\n      inflightCache: this.sdc,\n      persistCache: false,\n      isPrefetch: false\n    }).then(param => {\n      let {\n        text\n      } = param;\n      return {\n        data: text\n      };\n    });\n  }\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components[\"/_app\"];\n    const AppTree = this._wrapApp(App);\n    ctx.AppTree = AppTree;\n    return (0, _utils.loadGetInitialProps)(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n  get route() {\n    return this.state.route;\n  }\n  get pathname() {\n    return this.state.pathname;\n  }\n  get query() {\n    return this.state.query;\n  }\n  get asPath() {\n    return this.state.asPath;\n  }\n  get locale() {\n    return this.state.locale;\n  }\n  get isFallback() {\n    return this.state.isFallback;\n  }\n  get isPreview() {\n    return this.state.isPreview;\n  }\n  constructor(pathname, query, as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    err,\n    subscription,\n    isFallback,\n    locale,\n    locales,\n    defaultLocale,\n    domainLocales,\n    isPreview\n  }) {\n    // Server Data Cache (full data requests)\n    this.sdc = {};\n    // Server Background Cache (HEAD requests)\n    this.sbc = {};\n    this.isFirstPopStateEvent = true;\n    this._key = createKey();\n    this.onPopState = e => {\n      const {\n        isFirstPopStateEvent\n      } = this;\n      this.isFirstPopStateEvent = false;\n      const state = e.state;\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState(\"replaceState\", (0, _formaturl.formatWithValidation)({\n          pathname: (0, _addbasepath.addBasePath)(pathname),\n          query\n        }), (0, _utils.getURL)());\n        return;\n      }\n      // __NA is used to identify if the history entry can be handled by the app-router.\n      if (state.__NA) {\n        window.location.reload();\n        return;\n      }\n      if (!state.__N) {\n        return;\n      }\n      // Safari fires popstateevent when reopening the browser.\n      if (isFirstPopStateEvent && this.locale === state.options.locale && state.as === this.asPath) {\n        return;\n      }\n      let forcedScroll;\n      const {\n        url,\n        as,\n        options,\n        key\n      } = state;\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          if (this._key !== key) {\n            // Snapshot current scroll position:\n            try {\n              sessionStorage.setItem(\"__next_scroll_\" + this._key, JSON.stringify({\n                x: self.pageXOffset,\n                y: self.pageYOffset\n              }));\n            } catch (e) {}\n            // Restore old scroll position:\n            try {\n              const v = sessionStorage.getItem(\"__next_scroll_\" + key);\n              forcedScroll = JSON.parse(v);\n            } catch (e) {\n              forcedScroll = {\n                x: 0,\n                y: 0\n              };\n            }\n          }\n        }\n      }\n      this._key = key;\n      const {\n        pathname\n      } = (0, _parserelativeurl.parseRelativeUrl)(url);\n      // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n      if (this.isSsr && as === (0, _addbasepath.addBasePath)(this.asPath) && pathname === (0, _addbasepath.addBasePath)(this.pathname)) {\n        return;\n      }\n      // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n      this.change(\"replaceState\", url, as, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale,\n        // @ts-ignore internal value not exposed on types\n        _h: 0\n      }), forcedScroll);\n    };\n    // represents the current component key\n    const route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n    // set up the component cache (by route keys)\n    this.components = {};\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== \"/_error\") {\n      this.components[route] = {\n        Component,\n        initial: true,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n    this.components[\"/_app\"] = {\n      Component: App,\n      styleSheets: []\n    };\n    if (process.env.__NEXT_CLIENT_ROUTER_FILTER_ENABLED) {\n      const {\n        BloomFilter\n      } = require(\"../../lib/bloom-filter\");\n      const routerFilterSValue = process.env.__NEXT_CLIENT_ROUTER_S_FILTER;\n      const staticFilterData = routerFilterSValue ? routerFilterSValue : undefined;\n      const routerFilterDValue = process.env.__NEXT_CLIENT_ROUTER_D_FILTER;\n      const dynamicFilterData = routerFilterDValue ? routerFilterDValue : undefined;\n      if (staticFilterData == null ? void 0 : staticFilterData.numHashes) {\n        this._bfl_s = new BloomFilter(staticFilterData.numItems, staticFilterData.errorRate);\n        this._bfl_s.import(staticFilterData);\n      }\n      if (dynamicFilterData == null ? void 0 : dynamicFilterData.numHashes) {\n        this._bfl_d = new BloomFilter(dynamicFilterData.numItems, dynamicFilterData.errorRate);\n        this._bfl_d.import(dynamicFilterData);\n      }\n    }\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    const autoExportDynamic = (0, _isdynamic.isDynamicRoute)(pathname) && self.__NEXT_DATA__.autoExport;\n    this.basePath = process.env.__NEXT_ROUTER_BASEPATH || \"\";\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp;\n    // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true;\n    this.isLocaleDomain = false;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.isExperimentalCompile || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !process.env.__NEXT_HAS_REWRITES);\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locales = locales;\n      this.defaultLocale = defaultLocale;\n      this.domainLocales = domainLocales;\n      this.isLocaleDomain = !!(0, _detectdomainlocale.detectDomainLocale)(domainLocales, self.location.hostname);\n    }\n    this.state = {\n      route,\n      pathname,\n      query,\n      asPath: autoExportDynamic ? pathname : as,\n      isPreview: !!isPreview,\n      locale: process.env.__NEXT_I18N_SUPPORT ? locale : undefined,\n      isFallback\n    };\n    this._initialMatchesMiddlewarePromise = Promise.resolve(false);\n    if (typeof window !== \"undefined\") {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (!as.startsWith(\"//\")) {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        const options = {\n          locale\n        };\n        const asPath = (0, _utils.getURL)();\n        this._initialMatchesMiddlewarePromise = matchesMiddleware({\n          router: this,\n          locale,\n          asPath\n        }).then(matches => {\n          options._shouldResolveHref = as !== pathname;\n          this.changeState(\"replaceState\", matches ? asPath : (0, _formaturl.formatWithValidation)({\n            pathname: (0, _addbasepath.addBasePath)(pathname),\n            query\n          }), asPath, options);\n          return matches;\n        });\n      }\n      window.addEventListener(\"popstate\", this.onPopState);\n      // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = \"manual\";\n        }\n      }\n    }\n  }\n}\nRouter.events = (0, _mitt.default)();","map":{"version":3,"names":["createKey","Router","matchesMiddleware","buildCancellationError","Object","assign","Error","cancelled","options","matchers","Promise","resolve","router","pageLoader","getMiddleware","pathname","asPathname","_parsepath","parsePath","asPath","cleanedAs","_hasbasepath","hasBasePath","_removebasepath","removeBasePath","asWithBasePathAndLocale","_addbasepath","addBasePath","_addlocale","addLocale","locale","some","m","RegExp","regexp","test","stripOrigin","url","origin","_utils","getLocationOrigin","startsWith","substring","length","prepareUrlAs","as","resolvedHref","resolvedAs","_resolvehref","resolveHref","hrefWasAbsolute","asWasAbsolute","preparedUrl","preparedAs","resolveDynamicRoute","pages","cleanPathname","_removetrailingslash","removeTrailingSlash","_denormalizepagepath","denormalizePagePath","includes","page","_isdynamic","isDynamicRoute","_routeregex","getRouteRegex","re","getMiddlewareData","source","response","nextConfig","basePath","i18n","locales","trailingSlash","Boolean","process","env","__NEXT_TRAILING_SLASH","rewriteHeader","headers","get","rewriteTarget","matchedPath","__NEXT_EXTERNAL_MIDDLEWARE_REWRITE_RESOLVE","parsedRewriteTarget","_parserelativeurl","parseRelativeUrl","pathnameInfo","_getnextpathnameinfo","getNextPathnameInfo","parseData","fsPathname","all","getPageList","_routeloader","getClientBuildManifest","then","param","__rewrites","rewrites","_normalizelocalepath","normalizeLocalePath","parsedSource","__NEXT_HAS_REWRITES","undefined","result","_resolverewrites","default","query","path","matchedPage","parsedAs","resolvedPathname","matches","_routematcher","getRouteMatcher","type","src","_formatnextpathnameinfo","formatNextPathnameInfo","defaultLocale","buildId","destination","hash","redirectTarget","newAs","newUrl","withMiddlewareEffects","fetchData","data","effect","dataHref","json","text","cacheKey","manualScrollRestoration","__NEXT_SCROLL_RESTORATION","window","history","v","sessionStorage","setItem","removeItem","n","SSG_DATA_NOT_FOUND","Symbol","fetchRetry","attempts","fetch","credentials","method","ok","status","tryToParseAsJSON","JSON","parse","error","fetchNextData","inflightCache","isPrefetch","hasMiddleware","isServerRender","parseJSON","persistCache","isBackground","unstable_skipClientCache","href","URL","location","getData","params","_params_method","purpose","_tryToParseAsJSON","notFound","markAssetError","NODE_ENV","catch","err","message","Math","random","toString","slice","handleHardNavigation","getCancelledHandler","route","cancel","clc","handleCancelled","reload","back","forward","push","_key","stringify","x","self","pageXOffset","y","pageYOffset","e","change","replace","_bfl","skipNavigate","__NEXT_CLIENT_ROUTER_FILTER_ENABLED","matchesBflStatic","matchesBflDynamic","curAs","asNoSlash","asNoSlashLocale","_this__bfl_s","_this__bfl_s1","_bfl_s","contains","normalizedAS","curAsParts","split","i","_this__bfl_d","currentPart","join","_bfl_d","forcedScroll","_this_components_pathname","_islocalurl","isLocalURL","isQueryUpdating","_h","shallow","shouldResolveHref","_shouldResolveHref","nextState","state","readyStateChange","isReady","isSsr","prevLocale","__NEXT_I18N_SUPPORT","localePathResult","detectedLocale","_formaturl","formatWithValidation","didNavigate","_this_locales","detectedDomain","_detectdomainlocale","detectDomainLocale","domainLocales","isLocaleDomain","hostname","domain","asNoBasePath","http","ST","performance","mark","scroll","routeProps","_inFlightRoute","events","emit","_removelocale","removeLocale","localeChange","onlyAHashChange","changeState","scrollToHash","set","components","_iserror","parsed","urlIsNew","parsedAsPathname","__appRouter","isMiddlewareRewrite","isMiddlewareMatch","rewritesResult","p","externalDest","routeMatch","routeRegex","shouldInterpolate","interpolatedAs","_interpolateas","interpolateAs","missingParams","keys","groups","filter","optional","console","warn","_omit","omit","isErrorRoute","_self___NEXT_DATA___props_pageProps","_self___NEXT_DATA___props","_routeInfo_props","routeInfo","getRouteInfo","isPreview","isFallback","cleanedParsedPathname","forEach","key","prefixedAs","rewriteAs","localeResult","curRouteMatch","component","Component","unstable_scriptLoader","scripts","concat","script","_script","handleClientScriptLoad","props","__N_SSG","__N_SSP","pageProps","__N_REDIRECT","__N_REDIRECT_BASE_PATH","parsedHref","__N_PREVIEW","notFoundRoute","fetchComponent","_","isNotFound","__NEXT_DATA__","statusCode","_routeInfo_route","isValidShallowRoute","_options_scroll","shouldScroll","resetScroll","upcomingScrollState","upcomingRouterState","_self___NEXT_DATA___props_pageProps1","_self___NEXT_DATA___props1","_routeInfo_props1","canSkipUpdating","_comparestates","compareRouterStates","document","documentElement","lang","hashRegex","getURL","_shallow","__N","handleRouteInfoError","loadErrorFail","isAssetError","styleSheets","getInitialProps","gipErr","routeInfoErr","requestedRoute","_data_effect","_data_effect1","_data_effect2","_data_response","existingInfo","cachedRouteInfo","fetchNextDataParams","getDataHref","skipInterpolation","sbc","sdc","resolvedRoute","_isapiroute","isAPIRoute","res","mod","isValidElementType","require","wasBailedPrefetch","shouldFetchData","_getData","fetched","getProperError","sub","beforePopState","cb","_bps","oldUrlNoHash","oldHash","newUrlNoHash","newHash","_handlesmoothscroll","handleSmoothScroll","scrollTo","rawHash","decodeURIComponent","idEl","getElementById","scrollIntoView","nameEl","getElementsByName","onlyHashChange","prefetch","_isbot","isBot","navigator","userAgent","urlPathname","originalPathname","__NEXT_MIDDLEWARE_PREFETCH","_isSsg","isSsg","priority","__NEXT_OPTIMISTIC_CLIENT_CACHE","componentResult","loadPage","fn","_getFlightData","ctx","App","AppTree","_wrapApp","loadGetInitialProps","constructor","initialProps","wrapApp","subscription","isFirstPopStateEvent","onPopState","__NA","getItem","initial","BloomFilter","routerFilterSValue","__NEXT_CLIENT_ROUTER_S_FILTER","staticFilterData","routerFilterDValue","__NEXT_CLIENT_ROUTER_D_FILTER","dynamicFilterData","numHashes","numItems","errorRate","import","autoExportDynamic","autoExport","__NEXT_ROUTER_BASEPATH","gssp","gip","isExperimentalCompile","appGip","gsp","search","_initialMatchesMiddlewarePromise","addEventListener","scrollRestoration","_mitt"],"sources":["../../../../src/shared/lib/router/router.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;;;EA+lBgBA,SAAS,WAAAA,CAAA;WAATA,SAAA;;;WAiDKC,MAAA;;EAvjBCC,iBAAiB,WAAAA,CAAA;WAAjBA,iBAAA;;;;;qCA/Ec;6BAK7B;wBACgC;kEACC;qCACJ;qCACA;8DACnB;uBACkD;2BACpC;kCACE;yEACL;8BACI;4BACF;2BACO;oCACF;2BACT;2BACA;8BACG;gCACE;6BACH;6BACA;6BACA;4BACD;qCACS;wCACG;+BACH;4BACT;uBACL;sBACD;+BACS;oCACK;AAgCnC,SAASC,uBAAA;EACP,OAAOC,MAAA,CAAOC,MAAM,CAAC,IAAIC,KAAA,CAAM,oBAAoB;IACjDC,SAAA,EAAW;EACb;AACF;AASO,eAAeL,kBACpBM,OAAkC;EAElC,MAAMC,QAAA,GAAW,MAAMC,OAAA,CAAQC,OAAO,CACpCH,OAAA,CAAQI,MAAM,CAACC,UAAU,CAACC,aAAa;EAEzC,IAAI,CAACL,QAAA,EAAU,OAAO;EAEtB,MAAM;IAAEM,QAAA,EAAUC;EAAU,CAAE,GAAG,IAAAC,UAAA,CAAAC,SAAS,EAACV,OAAA,CAAQW,MAAM;EACzD;EACA,MAAMC,SAAA,GAAY,IAAAC,YAAA,CAAAC,WAAW,EAACN,UAAA,IAC1B,IAAAO,eAAA,CAAAC,cAAc,EAACR,UAAA,IACfA,UAAA;EACJ,MAAMS,uBAAA,GAA0B,IAAAC,YAAA,CAAAC,WAAW,EACzC,IAAAC,UAAA,CAAAC,SAAS,EAACT,SAAA,EAAWZ,OAAA,CAAQsB,MAAM;EAGrC;EACA;EACA,OAAOrB,QAAA,CAASsB,IAAI,CAAEC,CAAA,IACpB,IAAIC,MAAA,CAAOD,CAAA,CAAEE,MAAM,EAAEC,IAAI,CAACV,uBAAA;AAE9B;AAEA,SAASW,YAAYC,GAAW;EAC9B,MAAMC,MAAA,GAAS,IAAAC,MAAA,CAAAC,iBAAiB;EAEhC,OAAOH,GAAA,CAAII,UAAU,CAACH,MAAA,IAAUD,GAAA,CAAIK,SAAS,CAACJ,MAAA,CAAOK,MAAM,IAAIN,GAAA;AACjE;AAEA,SAASO,aAAahC,MAAkB,EAAEyB,GAAQ,EAAEQ,EAAQ;EAC1D;EACA;EACA,IAAI,CAACC,YAAA,EAAcC,UAAA,CAAW,GAAG,IAAAC,YAAA,CAAAC,WAAW,EAACrC,MAAA,EAAQyB,GAAA,EAAK;EAC1D,MAAMC,MAAA,GAAS,IAAAC,MAAA,CAAAC,iBAAiB;EAChC,MAAMU,eAAA,GAAkBJ,YAAA,CAAaL,UAAU,CAACH,MAAA;EAChD,MAAMa,aAAA,GAAgBJ,UAAA,IAAcA,UAAA,CAAWN,UAAU,CAACH,MAAA;EAE1DQ,YAAA,GAAeV,WAAA,CAAYU,YAAA;EAC3BC,UAAA,GAAaA,UAAA,GAAaX,WAAA,CAAYW,UAAA,IAAcA,UAAA;EAEpD,MAAMK,WAAA,GAAcF,eAAA,GAAkBJ,YAAA,GAAe,IAAApB,YAAA,CAAAC,WAAW,EAACmB,YAAA;EACjE,MAAMO,UAAA,GAAaR,EAAA,GACfT,WAAA,CAAY,IAAAY,YAAA,CAAAC,WAAW,EAACrC,MAAA,EAAQiC,EAAA,KAChCE,UAAA,IAAcD,YAAA;EAElB,OAAO;IACLT,GAAA,EAAKe,WAAA;IACLP,EAAA,EAAIM,aAAA,GAAgBE,UAAA,GAAa,IAAA3B,YAAA,CAAAC,WAAW,EAAC0B,UAAA;EAC/C;AACF;AAEA,SAASC,oBAAoBvC,QAAgB,EAAEwC,KAAe;EAC5D,MAAMC,aAAA,GAAgB,IAAAC,oBAAA,CAAAC,mBAAmB,EAAC,IAAAC,oBAAA,CAAAC,mBAAmB,EAAC7C,QAAA;EAC9D,IAAIyC,aAAA,KAAkB,UAAUA,aAAA,KAAkB,WAAW;IAC3D,OAAOzC,QAAA;EACT;EAEA;EACA,IAAI,CAACwC,KAAA,CAAMM,QAAQ,CAACL,aAAA,GAAgB;IAClC;IACAD,KAAA,CAAMxB,IAAI,CAAE+B,IAAA;MACV,IAAI,IAAAC,UAAA,CAAAC,cAAc,EAACF,IAAA,KAAS,IAAAG,WAAA,CAAAC,aAAa,EAACJ,IAAA,EAAMK,EAAE,CAAChC,IAAI,CAACqB,aAAA,GAAgB;QACtEzC,QAAA,GAAW+C,IAAA;QACX,OAAO;MACT;IACF;EACF;EACA,OAAO,IAAAL,oBAAA,CAAAC,mBAAmB,EAAC3C,QAAA;AAC7B;AAEA,SAASqD,kBACPC,MAAc,EACdC,QAAkB,EAClB9D,OAAkC;EAElC,MAAM+D,UAAA,GAAa;IACjBC,QAAA,EAAUhE,OAAA,CAAQI,MAAM,CAAC4D,QAAQ;IACjCC,IAAA,EAAM;MAAEC,OAAA,EAASlE,OAAA,CAAQI,MAAM,CAAC8D;IAAQ;IACxCC,aAAA,EAAeC,OAAA,CAAQC,OAAA,CAAQC,GAAG,CAACC,qBAAqB;EAC1D;EACA,MAAMC,aAAA,GAAgBV,QAAA,CAASW,OAAO,CAACC,GAAG,CAAC;EAE3C,IAAIC,aAAA,GACFH,aAAA,IAAiBV,QAAA,CAASW,OAAO,CAACC,GAAG,CAAC;EAExC,MAAME,WAAA,GAAcd,QAAA,CAASW,OAAO,CAACC,GAAG,CAAC;EAEzC,IACEE,WAAA,IACA,CAACD,aAAA,IACD,CAACC,WAAA,CAAYvB,QAAQ,CAAC,2BACtB,CAACuB,WAAA,CAAYvB,QAAQ,CAAC,cACtB,CAACuB,WAAA,CAAYvB,QAAQ,CAAC,SACtB;IACA;IACAsB,aAAA,GAAgBC,WAAA;EAClB;EAEA,IAAID,aAAA,EAAe;IACjB,IACEA,aAAA,CAAc1C,UAAU,CAAC,QACzBoC,OAAA,CAAQC,GAAG,CAACO,0CAA0C,EACtD;MACA,MAAMC,mBAAA,GAAsB,IAAAC,iBAAA,CAAAC,gBAAgB,EAACL,aAAA;MAC7C,MAAMM,YAAA,GAAe,IAAAC,oBAAA,CAAAC,mBAAmB,EAACL,mBAAA,CAAoBvE,QAAQ,EAAE;QACrEwD,UAAA;QACAqB,SAAA,EAAW;MACb;MAEA,IAAIC,UAAA,GAAa,IAAApC,oBAAA,CAAAC,mBAAmB,EAAC+B,YAAA,CAAa1E,QAAQ;MAC1D,OAAOL,OAAA,CAAQoF,GAAG,CAAC,CACjBtF,OAAA,CAAQI,MAAM,CAACC,UAAU,CAACkF,WAAW,IACrC,IAAAC,YAAA,CAAAC,sBAAsB,IACvB,EAAEC,IAAI,CAACC,KAAA;YAAC,CAAC5C,KAAA,EAAO;UAAE6C,UAAA,EAAYC;QAAQ,CAAE,CAAM,GAAAF,KAAA;QAC7C,IAAItD,EAAA,GAAK,IAAAjB,UAAA,CAAAC,SAAS,EAAC4D,YAAA,CAAa1E,QAAQ,EAAE0E,YAAA,CAAa3D,MAAM;QAE7D,IACE,IAAAiC,UAAA,CAAAC,cAAc,EAACnB,EAAA,KACd,CAACmC,aAAA,IACAzB,KAAA,CAAMM,QAAQ,CACZ,IAAAyC,oBAAA,CAAAC,mBAAmB,EAAC,IAAAhF,eAAA,CAAAC,cAAc,EAACqB,EAAA,GAAKrC,OAAA,CAAQI,MAAM,CAAC8D,OAAO,EAC3D3D,QAAQ,GAEf;UACA,MAAMyF,YAAA,GAAe,IAAAd,oBAAA,CAAAC,mBAAmB,EACtC,IAAAJ,iBAAA,CAAAC,gBAAgB,EAACnB,MAAA,EAAQtD,QAAQ,EACjC;YACEwD,UAAA,EAAYM,OAAA,CAAQC,GAAG,CAAC2B,mBAAmB,GACvCC,SAAA,GACAnC,UAAA;YACJqB,SAAA,EAAW;UACb;UAGF/C,EAAA,GAAK,IAAAnB,YAAA,CAAAC,WAAW,EAAC6E,YAAA,CAAazF,QAAQ;UACtCuE,mBAAA,CAAoBvE,QAAQ,GAAG8B,EAAA;QACjC;QAEA,IAAIgC,OAAA,CAAQC,GAAG,CAAC2B,mBAAmB,EAAE;UACnC,MAAME,MAAA,GAAS,IAAAC,gBAAA,CAAAC,OAAe,EAC5BhE,EAAA,EACAU,KAAA,EACA8C,QAAA,EACAf,mBAAA,CAAoBwB,KAAK,EACxBC,IAAA,IAAiBzD,mBAAA,CAAoByD,IAAA,EAAMxD,KAAA,GAC5C/C,OAAA,CAAQI,MAAM,CAAC8D,OAAO;UAGxB,IAAIiC,MAAA,CAAOK,WAAW,EAAE;YACtB1B,mBAAA,CAAoBvE,QAAQ,GAAG4F,MAAA,CAAOM,QAAQ,CAAClG,QAAQ;YACvD8B,EAAA,GAAKyC,mBAAA,CAAoBvE,QAAQ;YACjCX,MAAA,CAAOC,MAAM,CAACiF,mBAAA,CAAoBwB,KAAK,EAAEH,MAAA,CAAOM,QAAQ,CAACH,KAAK;UAChE;QACF,OAAO,IAAI,CAACvD,KAAA,CAAMM,QAAQ,CAACgC,UAAA,GAAa;UACtC,MAAMqB,gBAAA,GAAmB5D,mBAAA,CAAoBuC,UAAA,EAAYtC,KAAA;UAEzD,IAAI2D,gBAAA,KAAqBrB,UAAA,EAAY;YACnCA,UAAA,GAAaqB,gBAAA;UACf;QACF;QAEA,MAAMpE,YAAA,GAAe,CAACS,KAAA,CAAMM,QAAQ,CAACgC,UAAA,IACjCvC,mBAAA,CACE,IAAAgD,oBAAA,CAAAC,mBAAmB,EACjB,IAAAhF,eAAA,CAAAC,cAAc,EAAC8D,mBAAA,CAAoBvE,QAAQ,GAC3CP,OAAA,CAAQI,MAAM,CAAC8D,OAAO,EACtB3D,QAAQ,EACVwC,KAAA,IAEFsC,UAAA;QAEJ,IAAI,IAAA9B,UAAA,CAAAC,cAAc,EAAClB,YAAA,GAAe;UAChC,MAAMqE,OAAA,GAAU,IAAAC,aAAA,CAAAC,eAAe,EAAC,IAAApD,WAAA,CAAAC,aAAa,EAACpB,YAAA,GAAeD,EAAA;UAC7DzC,MAAA,CAAOC,MAAM,CAACiF,mBAAA,CAAoBwB,KAAK,EAAEK,OAAA,IAAW,CAAC;QACvD;QAEA,OAAO;UACLG,IAAA,EAAM;UACNL,QAAA,EAAU3B,mBAAA;UACVxC;QACF;MACF;IACF;IACA,MAAMyE,GAAA,GAAM,IAAAtG,UAAA,CAAAC,SAAS,EAACmD,MAAA;IACtB,MAAMtD,QAAA,GAAW,IAAAyG,uBAAA,CAAAC,sBAAsB,EAAC;MACtC,GAAG,IAAA/B,oBAAA,CAAAC,mBAAmB,EAAC4B,GAAA,CAAIxG,QAAQ,EAAE;QAAEwD,UAAA;QAAYqB,SAAA,EAAW;MAAK,EAAE;MACrE8B,aAAA,EAAelH,OAAA,CAAQI,MAAM,CAAC8G,aAAa;MAC3CC,OAAA,EAAS;IACX;IAEA,OAAOjH,OAAA,CAAQC,OAAO,CAAC;MACrB2G,IAAA,EAAM;MACNM,WAAA,EAAa,EAAC,GAAE7G,QAAA,GAAWwG,GAAA,CAAIT,KAAK,GAAGS,GAAA,CAAIM;IAC7C;EACF;EAEA,MAAMC,cAAA,GAAiBxD,QAAA,CAASW,OAAO,CAACC,GAAG,CAAC;EAE5C,IAAI4C,cAAA,EAAgB;IAClB,IAAIA,cAAA,CAAerF,UAAU,CAAC,MAAM;MAClC,MAAM8E,GAAA,GAAM,IAAAtG,UAAA,CAAAC,SAAS,EAAC4G,cAAA;MACtB,MAAM/G,QAAA,GAAW,IAAAyG,uBAAA,CAAAC,sBAAsB,EAAC;QACtC,GAAG,IAAA/B,oBAAA,CAAAC,mBAAmB,EAAC4B,GAAA,CAAIxG,QAAQ,EAAE;UAAEwD,UAAA;UAAYqB,SAAA,EAAW;QAAK,EAAE;QACrE8B,aAAA,EAAelH,OAAA,CAAQI,MAAM,CAAC8G,aAAa;QAC3CC,OAAA,EAAS;MACX;MAEA,OAAOjH,OAAA,CAAQC,OAAO,CAAC;QACrB2G,IAAA,EAAM;QACNS,KAAA,EAAO,EAAC,GAAEhH,QAAA,GAAWwG,GAAA,CAAIT,KAAK,GAAGS,GAAA,CAAIM,IAAI;QACzCG,MAAA,EAAQ,EAAC,GAAEjH,QAAA,GAAWwG,GAAA,CAAIT,KAAK,GAAGS,GAAA,CAAIM;MACxC;IACF;IAEA,OAAOnH,OAAA,CAAQC,OAAO,CAAC;MACrB2G,IAAA,EAAM;MACNM,WAAA,EAAaE;IACf;EACF;EAEA,OAAOpH,OAAA,CAAQC,OAAO,CAAC;IAAE2G,IAAA,EAAM;EAAgB;AACjD;AAMA,eAAeW,sBACbzH,OAAkC;EAElC,MAAM2G,OAAA,GAAU,MAAMjH,iBAAA,CAAkBM,OAAA;EACxC,IAAI,CAAC2G,OAAA,IAAW,CAAC3G,OAAA,CAAQ0H,SAAS,EAAE;IAClC,OAAO;EACT;EAEA,MAAMC,IAAA,GAAO,MAAM3H,OAAA,CAAQ0H,SAAS;EAEpC,MAAME,MAAA,GAAS,MAAMhE,iBAAA,CAAkB+D,IAAA,CAAKE,QAAQ,EAAEF,IAAA,CAAK7D,QAAQ,EAAE9D,OAAA;EAErE,OAAO;IACL6H,QAAA,EAAUF,IAAA,CAAKE,QAAQ;IACvBC,IAAA,EAAMH,IAAA,CAAKG,IAAI;IACfhE,QAAA,EAAU6D,IAAA,CAAK7D,QAAQ;IACvBiE,IAAA,EAAMJ,IAAA,CAAKI,IAAI;IACfC,QAAA,EAAUL,IAAA,CAAKK,QAAQ;IACvBJ;EACF;AACF;AAyEA,MAAMK,uBAAA,GACJ5D,OAAA,CAAQC,GAAG,CAAC4D,yBAAyB,IACrC,OAAOC,MAAA,KAAW,eAClB,uBAAuBA,MAAA,CAAOC,OAAO,IACrC,CAAC,CAAC,YAAC;EACD,IAAI;IACF,IAAIC,CAAA,GAAI;IACR;IACA,OAAOC,cAAA,CAAeC,OAAO,CAACF,CAAA,EAAGA,CAAA,GAAIC,cAAA,CAAeE,UAAU,CAACH,CAAA,GAAI;EACrE,EAAE,OAAOI,CAAA,EAAG,CAAC;AACf;AAEF,MAAMC,kBAAA,GAAqBC,MAAA,CAAO;AAElC,SAASC,WACP/G,GAAW,EACXgH,QAAgB,EAChB7I,OAAgD;EAEhD,OAAO8I,KAAA,CAAMjH,GAAA,EAAK;IAChB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAkH,WAAA,EAAa;IACbC,MAAA,EAAQhJ,OAAA,CAAQgJ,MAAM,IAAI;IAC1BvE,OAAA,EAAS7E,MAAA,CAAOC,MAAM,CAAC,CAAC,GAAGG,OAAA,CAAQyE,OAAO,EAAE;MAC1C,iBAAiB;IACnB;EACF,GAAGiB,IAAI,CAAE5B,QAAA;IACP,OAAO,CAACA,QAAA,CAASmF,EAAE,IAAIJ,QAAA,GAAW,KAAK/E,QAAA,CAASoF,MAAM,IAAI,MACtDN,UAAA,CAAW/G,GAAA,EAAKgH,QAAA,GAAW,GAAG7I,OAAA,IAC9B8D,QAAA;EACN;AACF;AAsBA,SAASqF,iBAAiBpB,IAAY;EACpC,IAAI;IACF,OAAOqB,IAAA,CAAKC,KAAK,CAACtB,IAAA;EACpB,EAAE,OAAOuB,KAAA,EAAO;IACd,OAAO;EACT;AACF;AAEA,SAASC,cAAc5D,KAUD;EAVC;IACrBkC,QAAQ;IACR2B,aAAa;IACbC,UAAU;IACVC,aAAa;IACbC,cAAc;IACdC,SAAS;IACTC,YAAY;IACZC,YAAY;IACZC;EAAwB,CACJ,GAVCpE,KAAA;EAWrB,MAAM;IAAEqE,IAAA,EAAMhC;EAAQ,CAAE,GAAG,IAAIiC,GAAA,CAAIpC,QAAA,EAAUM,MAAA,CAAO+B,QAAQ,CAACF,IAAI;EACjE,MAAMG,OAAA,GAAWC,MAAA;QAOLC,cAAA;WANVzB,UAAA,CAAWf,QAAA,EAAU8B,cAAA,GAAiB,IAAI,GAAG;MAC3ClF,OAAA,EAAS7E,MAAA,CAAOC,MAAM,CACpB,CAAC,GACD4J,UAAA,GAAa;QAAEa,OAAA,EAAS;MAAW,IAAI,CAAC,GACxCb,UAAA,IAAcC,aAAA,GAAgB;QAAE,yBAAyB;MAAI,IAAI,CAAC;MAEpEV,MAAA,EAAQ,CAAAqB,cAAA,GAAAD,MAAA,oBAAAA,MAAA,CAAQpB,MAAM,YAAdqB,cAAA,GAAkB;IAC5B,GACG3E,IAAI,CAAE5B,QAAA;MACL,IAAIA,QAAA,CAASmF,EAAE,IAAI,CAAAmB,MAAA,oBAAAA,MAAA,CAAQpB,MAAM,MAAK,QAAQ;QAC5C,OAAO;UAAEnB,QAAA;UAAU/D,QAAA;UAAUiE,IAAA,EAAM;UAAID,IAAA,EAAM,CAAC;UAAGE;QAAS;MAC5D;MAEA,OAAOlE,QAAA,CAASiE,IAAI,GAAGrC,IAAI,CAAEqC,IAAA;QAC3B,IAAI,CAACjE,QAAA,CAASmF,EAAE,EAAE;UAChB;;;;;;UAMA,IACES,aAAA,IACA,CAAC,KAAK,KAAK,KAAK,IAAI,CAACrG,QAAQ,CAACS,QAAA,CAASoF,MAAM,GAC7C;YACA,OAAO;cAAErB,QAAA;cAAU/D,QAAA;cAAUiE,IAAA;cAAMD,IAAA,EAAM,CAAC;cAAGE;YAAS;UACxD;UAEA,IAAIlE,QAAA,CAASoF,MAAM,KAAK,KAAK;gBACvBqB,iBAAA;YAAJ,KAAIA,iBAAA,GAAApB,gBAAA,CAAiBpB,IAAA,sBAAjBwC,iBAAA,CAAwBC,QAAQ,EAAE;cACpC,OAAO;gBACL3C,QAAA;gBACAC,IAAA,EAAM;kBAAE0C,QAAA,EAAU9B;gBAAmB;gBACrC5E,QAAA;gBACAiE,IAAA;gBACAC;cACF;YACF;UACF;UAEA,MAAMsB,KAAA,GAAQ,IAAIxJ,KAAA,CAAO;UAEzB;;;;;UAKA,IAAI,CAAC6J,cAAA,EAAgB;YACnB,IAAAnE,YAAA,CAAAiF,cAAc,EAACnB,KAAA;UACjB;UAEA,MAAMA,KAAA;QACR;QAEA,OAAO;UACLzB,QAAA;UACAC,IAAA,EAAM8B,SAAA,GAAYT,gBAAA,CAAiBpB,IAAA,IAAQ;UAC3CjE,QAAA;UACAiE,IAAA;UACAC;QACF;MACF;IACF,GACCtC,IAAI,CAAEiC,IAAA;MACL,IACE,CAACkC,YAAA,IACDxF,OAAA,CAAQC,GAAG,CAACoG,QAAQ,KAAK,gBACzB/C,IAAA,CAAK7D,QAAQ,CAACW,OAAO,CAACC,GAAG,CAAC,0BAA0B,YACpD;QACA,OAAO8E,aAAa,CAACxB,QAAA,CAAS;MAChC;MACA,OAAOL,IAAA;IACT,GACCgD,KAAK,CAAEC,GAAA;MACN,IAAI,CAACb,wBAAA,EAA0B;QAC7B,OAAOP,aAAa,CAACxB,QAAA,CAAS;MAChC;MACA;MACE;MACA4C,GAAA,CAAIC,OAAO,KAAK;MAChB;MACAD,GAAA,CAAIC,OAAO,KAAK;MAChB;MACAD,GAAA,CAAIC,OAAO,KAAK,eAChB;QACA,IAAArF,YAAA,CAAAiF,cAAc,EAACG,GAAA;MACjB;MACA,MAAMA,GAAA;IACR;EAAC;EAEL;EACA;EACA;EACA;EACA,IAAIb,wBAAA,IAA4BF,YAAA,EAAc;IAC5C,OAAOM,OAAA,CAAQ,CAAC,GAAGzE,IAAI,CAAEiC,IAAA;MACvB6B,aAAa,CAACxB,QAAA,CAAS,GAAG9H,OAAA,CAAQC,OAAO,CAACwH,IAAA;MAC1C,OAAOA,IAAA;IACT;EACF;EAEA,IAAI6B,aAAa,CAACxB,QAAA,CAAS,KAAK9B,SAAA,EAAW;IACzC,OAAOsD,aAAa,CAACxB,QAAA,CAAS;EAChC;EACA,OAAQwB,aAAa,CAACxB,QAAA,CAAS,GAAGmC,OAAA,CAChCL,YAAA,GAAe;IAAEd,MAAA,EAAQ;EAAO,IAAI,CAAC;AAEzC;AAMO,SAASxJ,UAAA;EACd,OAAOsL,IAAA,CAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,KAAK,CAAC,GAAG;AAC7C;AAEA,SAASC,qBAAqBvF,KAM7B;EAN6B;IAC5B9D,GAAG;IACHzB;EAAM,CAIP,GAN6BuF,KAAA;EAO5B;EACA;EACA,IAAI9D,GAAA,KAAQ,IAAAX,YAAA,CAAAC,WAAW,EAAC,IAAAC,UAAA,CAAAC,SAAS,EAACjB,MAAA,CAAOO,MAAM,EAAEP,MAAA,CAAOkB,MAAM,IAAI;IAChE,MAAM,IAAIxB,KAAA,CACR,wDAAC,GAAwD+B,GAAA,GAAI,MAAGqI,QAAA,CAASF,IAAI;EAEjF;EACA7B,MAAA,CAAO+B,QAAQ,CAACF,IAAI,GAAGnI,GAAA;AACzB;AAEA,MAAMsJ,mBAAA,GAAsBxF,KAAA;MAAC;IAC3ByF,KAAK;IACLhL;EAAM,CAIP,GAAAuF,KAAA;EACC,IAAI5F,SAAA,GAAY;EAChB,MAAMsL,MAAA,GAAUjL,MAAA,CAAOkL,GAAG,GAAG;IAC3BvL,SAAA,GAAY;EACd;EAEA,MAAMwL,eAAA,GAAkBA,CAAA;IACtB,IAAIxL,SAAA,EAAW;MACb,MAAMuJ,KAAA,GAAa,IAAIxJ,KAAA,CACrB,uCAAC,GAAuCsL,KAAA,GAAM;MAEhD9B,KAAA,CAAMvJ,SAAS,GAAG;MAClB,MAAMuJ,KAAA;IACR;IAEA,IAAI+B,MAAA,KAAWjL,MAAA,CAAOkL,GAAG,EAAE;MACzBlL,MAAA,CAAOkL,GAAG,GAAG;IACf;EACF;EACA,OAAOC,eAAA;AACT;AAEe,MAAM9L,MAAA;EAsVnB+L,OAAA,EAAe;IACbrD,MAAA,CAAO+B,QAAQ,CAACsB,MAAM;EACxB;EAEA;;;EAGAC,KAAA,EAAO;IACLtD,MAAA,CAAOC,OAAO,CAACqD,IAAI;EACrB;EAEA;;;EAGAC,QAAA,EAAU;IACRvD,MAAA,CAAOC,OAAO,CAACsD,OAAO;EACxB;EAEA;;;;;;EAMAC,KAAK9J,GAAQ,EAAEQ,EAAQ,EAAErC,OAA+B,EAAE;IAAjC,IAAAA,OAAA,aAAAA,OAAA,GAA6B,CAAC;IACrD,IAAIqE,OAAA,CAAQC,GAAG,CAAC4D,yBAAyB,EAAE;MACzC;MACA;MACA,IAAID,uBAAA,EAAyB;QAC3B,IAAI;UACF;UACAK,cAAA,CAAeC,OAAO,CACpB,mBAAmB,IAAI,CAACqD,IAAI,EAC5BxC,IAAA,CAAKyC,SAAS,CAAC;YAAEC,CAAA,EAAGC,IAAA,CAAKC,WAAW;YAAEC,CAAA,EAAGF,IAAA,CAAKG;UAAY;QAE9D,EAAE,OAAAC,CAAA,EAAM,CAAC;MACX;IACF;IACE;MAAEtK,GAAG;MAAEQ;IAAE,CAAE,GAAGD,YAAA,CAAa,IAAI,EAAEP,GAAA,EAAKQ,EAAA,CAAE;IAC1C,OAAO,IAAI,CAAC+J,MAAM,CAAC,aAAavK,GAAA,EAAKQ,EAAA,EAAIrC,OAAA;EAC3C;EAEA;;;;;;EAMAqM,QAAQxK,GAAQ,EAAEQ,EAAQ,EAAErC,OAA+B,EAAE;IAAjC,IAAAA,OAAA,aAAAA,OAAA,GAA6B,CAAC;IACtD;MAAE6B,GAAG;MAAEQ;IAAE,CAAE,GAAGD,YAAA,CAAa,IAAI,EAAEP,GAAA,EAAKQ,EAAA,CAAE;IAC1C,OAAO,IAAI,CAAC+J,MAAM,CAAC,gBAAgBvK,GAAA,EAAKQ,EAAA,EAAIrC,OAAA;EAC9C;EAEA,MAAMsM,KACJjK,EAAU,EACVE,UAAmB,EACnBjB,MAAuB,EACvBiL,YAAsB,EACtB;IACA,IAAIlI,OAAA,CAAQC,GAAG,CAACkI,mCAAmC,EAAE;MACnD,IAAIC,gBAAA,GAAmB;MACvB,IAAIC,iBAAA,GAAoB;MAExB,KAAK,MAAMC,KAAA,IAAS,CAACtK,EAAA,EAAIE,UAAA,CAAW,EAAE;QACpC,IAAIoK,KAAA,EAAO;UACT,MAAMC,SAAA,GAAY,IAAA3J,oBAAA,CAAAC,mBAAmB,EACnC,IAAI+G,GAAA,CAAI0C,KAAA,EAAO,YAAYpM,QAAQ;UAErC,MAAMsM,eAAA,GAAkB,IAAA3L,YAAA,CAAAC,WAAW,EACjC,IAAAC,UAAA,CAAAC,SAAS,EAACuL,SAAA,EAAWtL,MAAA,IAAU,IAAI,CAACA,MAAM;UAG5C,IACEsL,SAAA,KACA,IAAA3J,oBAAA,CAAAC,mBAAmB,EAAC,IAAI+G,GAAA,CAAI,IAAI,CAACtJ,MAAM,EAAE,YAAYJ,QAAQ,GAC7D;gBAGIuM,YAAA,EACAC,aAAA;YAHJN,gBAAA,GACEA,gBAAA,IACA,CAAC,GAACK,YAAA,OAAI,CAACE,MAAM,qBAAXF,YAAA,CAAaG,QAAQ,CAACL,SAAA,MACxB,CAAC,GAACG,aAAA,OAAI,CAACC,MAAM,qBAAXD,aAAA,CAAaE,QAAQ,CAACJ,eAAA;YAE1B,KAAK,MAAMK,YAAA,IAAgB,CAACN,SAAA,EAAWC,eAAA,CAAgB,EAAE;cACvD;cACA;cACA,MAAMM,UAAA,GAAaD,YAAA,CAAaE,KAAK,CAAC;cACtC,KACE,IAAIC,CAAA,GAAI,GACR,CAACX,iBAAA,IAAqBW,CAAA,GAAIF,UAAA,CAAWhL,MAAM,GAAG,GAC9CkL,CAAA,IACA;oBAEmBC,YAAA;gBADnB,MAAMC,WAAA,GAAcJ,UAAA,CAAWlC,KAAK,CAAC,GAAGoC,CAAA,EAAGG,IAAI,CAAC;gBAChD,IAAID,WAAA,MAAeD,YAAA,OAAI,CAACG,MAAM,qBAAXH,YAAA,CAAaL,QAAQ,CAACM,WAAA,IAAc;kBACrDb,iBAAA,GAAoB;kBACpB;gBACF;cACF;YACF;YAEA;YACA;YACA,IAAID,gBAAA,IAAoBC,iBAAA,EAAmB;cACzC,IAAIH,YAAA,EAAc;gBAChB,OAAO;cACT;cACArB,oBAAA,CAAqB;gBACnBrJ,GAAA,EAAK,IAAAX,YAAA,CAAAC,WAAW,EACd,IAAAC,UAAA,CAAAC,SAAS,EAACgB,EAAA,EAAIf,MAAA,IAAU,IAAI,CAACA,MAAM,EAAE,IAAI,CAAC4F,aAAa;gBAEzD9G,MAAA,EAAQ;cACV;cACA,OAAO,IAAIF,OAAA,CAAQ,OAAO;YAC5B;UACF;QACF;MACF;IACF;IACA,OAAO;EACT;EAEA,MAAckM,OACZpD,MAAqB,EACrBnH,GAAW,EACXQ,EAAU,EACVrC,OAA0B,EAC1B0N,YAAuC,EACrB;QA8ObC,yBAAA;IA7OL,IAAI,CAAC,IAAAC,WAAA,CAAAC,UAAU,EAAChM,GAAA,GAAM;MACpBqJ,oBAAA,CAAqB;QAAErJ,GAAA;QAAKzB,MAAA,EAAQ;MAAK;MACzC,OAAO;IACT;IACA;IACA;IACA;IACA,MAAM0N,eAAA,GAAkB9N,OAAC,CAAgB+N,EAAE,KAAK;IAEhD,IAAI,CAACD,eAAA,IAAmB,CAAC9N,OAAA,CAAQgO,OAAO,EAAE;MACxC,MAAM,IAAI,CAAC1B,IAAI,CAACjK,EAAA,EAAI6D,SAAA,EAAWlG,OAAA,CAAQsB,MAAM;IAC/C;IAEA,IAAI2M,iBAAA,GACFH,eAAA,IACA9N,OAAC,CAAgBkO,kBAAkB,IACnC,IAAAzN,UAAA,CAAAC,SAAS,EAACmB,GAAA,EAAKtB,QAAQ,KAAK,IAAAE,UAAA,CAAAC,SAAS,EAAC2B,EAAA,EAAI9B,QAAQ;IAEpD,MAAM4N,SAAA,GAAY;MAChB,GAAG,IAAI,CAACC;IACV;IAEA;IACA;IACA;IACA,MAAMC,gBAAA,GAAmB,IAAI,CAACC,OAAO,KAAK;IAC1C,IAAI,CAACA,OAAO,GAAG;IACf,MAAMC,KAAA,GAAQ,IAAI,CAACA,KAAK;IAExB,IAAI,CAACT,eAAA,EAAiB;MACpB,IAAI,CAACS,KAAK,GAAG;IACf;IAEA;IACA;IACA,IAAIT,eAAA,IAAmB,IAAI,CAACxC,GAAG,EAAE;MAC/B,OAAO;IACT;IAEA,MAAMkD,UAAA,GAAaL,SAAA,CAAU7M,MAAM;IAEnC,IAAI+C,OAAA,CAAQC,GAAG,CAACmK,mBAAmB,EAAE;MACnCN,SAAA,CAAU7M,MAAM,GACdtB,OAAA,CAAQsB,MAAM,KAAK,QACf,IAAI,CAAC4F,aAAa,GAClBlH,OAAA,CAAQsB,MAAM,IAAI6M,SAAA,CAAU7M,MAAM;MAExC,IAAI,OAAOtB,OAAA,CAAQsB,MAAM,KAAK,aAAa;QACzCtB,OAAA,CAAQsB,MAAM,GAAG6M,SAAA,CAAU7M,MAAM;MACnC;MAEA,MAAMmF,QAAA,GAAW,IAAA1B,iBAAA,CAAAC,gBAAgB,EAC/B,IAAAnE,YAAA,CAAAC,WAAW,EAACuB,EAAA,IAAM,IAAAtB,eAAA,CAAAC,cAAc,EAACqB,EAAA,IAAMA,EAAA;MAEzC,MAAMqM,gBAAA,GAAmB,IAAA5I,oBAAA,CAAAC,mBAAmB,EAC1CU,QAAA,CAASlG,QAAQ,EACjB,IAAI,CAAC2D,OAAO;MAGd,IAAIwK,gBAAA,CAAiBC,cAAc,EAAE;QACnCR,SAAA,CAAU7M,MAAM,GAAGoN,gBAAA,CAAiBC,cAAc;QAClDlI,QAAA,CAASlG,QAAQ,GAAG,IAAAW,YAAA,CAAAC,WAAW,EAACsF,QAAA,CAASlG,QAAQ;QACjD8B,EAAA,GAAK,IAAAuM,UAAA,CAAAC,oBAAoB,EAACpI,QAAA;QAC1B5E,GAAA,GAAM,IAAAX,YAAA,CAAAC,WAAW,EACf,IAAA2E,oBAAA,CAAAC,mBAAmB,EACjB,IAAAlF,YAAA,CAAAC,WAAW,EAACe,GAAA,IAAO,IAAAd,eAAA,CAAAC,cAAc,EAACa,GAAA,IAAOA,GAAA,EACzC,IAAI,CAACqC,OAAO,EACZ3D,QAAQ;MAEd;MACA,IAAIuO,WAAA,GAAc;MAElB;MACA;MACA,IAAIzK,OAAA,CAAQC,GAAG,CAACmK,mBAAmB,EAAE;YAE9BM,aAAA;QADL;QACA,IAAI,GAACA,aAAA,OAAI,CAAC7K,OAAO,qBAAZ6K,aAAA,CAAc1L,QAAQ,CAAC8K,SAAA,CAAU7M,MAAM,IAAI;UAC9CmF,QAAA,CAASlG,QAAQ,GAAG,IAAAa,UAAA,CAAAC,SAAS,EAACoF,QAAA,CAASlG,QAAQ,EAAE4N,SAAA,CAAU7M,MAAM;UACjE4J,oBAAA,CAAqB;YACnBrJ,GAAA,EAAK,IAAA+M,UAAA,CAAAC,oBAAoB,EAACpI,QAAA;YAC1BrG,MAAA,EAAQ;UACV;UACA;UACA;UACA0O,WAAA,GAAc;QAChB;MACF;MAEA,MAAME,cAAA,GAAiB,IAAAC,mBAAA,CAAAC,kBAAkB,EACvC,IAAI,CAACC,aAAa,EAClBjJ,SAAA,EACAiI,SAAA,CAAU7M,MAAM;MAGlB;MACA;MACA,IAAI+C,OAAA,CAAQC,GAAG,CAACmK,mBAAmB,EAAE;QACnC;QACA;QACA,IACE,CAACK,WAAA,IACDE,cAAA,IACA,IAAI,CAACI,cAAc,IACnBrD,IAAA,CAAK7B,QAAQ,CAACmF,QAAQ,KAAKL,cAAA,CAAeM,MAAM,EAChD;UACA,MAAMC,YAAA,GAAe,IAAAxO,eAAA,CAAAC,cAAc,EAACqB,EAAA;UACpC6I,oBAAA,CAAqB;YACnBrJ,GAAA,EAAK,MAAC,IAAMmN,cAAA,CAAeQ,IAAI,GAAG,KAAK,GAAE,IAAE,QACzCR,cAAA,CAAeM,MAAM,GACpB,IAAApO,YAAA,CAAAC,WAAW,EACZ,EAAC,IACCgN,SAAA,CAAU7M,MAAM,KAAK0N,cAAA,CAAe9H,aAAa,GAC7C,KACA,GAAC,GAAGiH,SAAA,CAAU7M,MAAM,CAAC,IACxBiO,YAAA,KAAiB,MAAM,KAAKA,YAAW,KAAO;YAEnDnP,MAAA,EAAQ;UACV;UACA;UACA;UACA0O,WAAA,GAAc;QAChB;MACF;MAEA,IAAIA,WAAA,EAAa;QACf,OAAO,IAAI5O,OAAA,CAAQ,OAAO;MAC5B;IACF;IAEA;IACA,IAAI6B,MAAA,CAAA0N,EAAE,EAAE;MACNC,WAAA,CAAYC,IAAI,CAAC;IACnB;IAEA,MAAM;MAAE3B,OAAA,GAAU,KAAK;MAAE4B,MAAA,GAAS;IAAI,CAAE,GAAG5P,OAAA;IAC3C,MAAM6P,UAAA,GAAa;MAAE7B;IAAQ;IAE7B,IAAI,IAAI,CAAC8B,cAAc,IAAI,IAAI,CAACxE,GAAG,EAAE;MACnC,IAAI,CAACiD,KAAA,EAAO;QACV9O,MAAA,CAAOsQ,MAAM,CAACC,IAAI,CAChB,oBACArQ,sBAAA,IACA,IAAI,CAACmQ,cAAc,EACnBD,UAAA;MAEJ;MACA,IAAI,CAACvE,GAAG;MACR,IAAI,CAACA,GAAG,GAAG;IACb;IAEAjJ,EAAA,GAAK,IAAAnB,YAAA,CAAAC,WAAW,EACd,IAAAC,UAAA,CAAAC,SAAS,EACP,IAAAR,YAAA,CAAAC,WAAW,EAACuB,EAAA,IAAM,IAAAtB,eAAA,CAAAC,cAAc,EAACqB,EAAA,IAAMA,EAAA,EACvCrC,OAAA,CAAQsB,MAAM,EACd,IAAI,CAAC4F,aAAa;IAGtB,MAAMtG,SAAA,GAAY,IAAAqP,aAAA,CAAAC,YAAY,EAC5B,IAAArP,YAAA,CAAAC,WAAW,EAACuB,EAAA,IAAM,IAAAtB,eAAA,CAAAC,cAAc,EAACqB,EAAA,IAAMA,EAAA,EACvC8L,SAAA,CAAU7M,MAAM;IAElB,IAAI,CAACwO,cAAc,GAAGzN,EAAA;IAEtB,MAAM8N,YAAA,GAAe3B,UAAA,KAAeL,SAAA,CAAU7M,MAAM;IAEpD;IACA;IAEA,IAAI,CAACwM,eAAA,IAAmB,IAAI,CAACsC,eAAe,CAACxP,SAAA,KAAc,CAACuP,YAAA,EAAc;MACxEhC,SAAA,CAAUxN,MAAM,GAAGC,SAAA;MACnBnB,MAAA,CAAOsQ,MAAM,CAACC,IAAI,CAAC,mBAAmB3N,EAAA,EAAIwN,UAAA;MAC1C;MACA,IAAI,CAACQ,WAAW,CAACrH,MAAA,EAAQnH,GAAA,EAAKQ,EAAA,EAAI;QAChC,GAAGrC,OAAO;QACV4P,MAAA,EAAQ;MACV;MACA,IAAIA,MAAA,EAAQ;QACV,IAAI,CAACU,YAAY,CAAC1P,SAAA;MACpB;MACA,IAAI;QACF,MAAM,IAAI,CAAC2P,GAAG,CAACpC,SAAA,EAAW,IAAI,CAACqC,UAAU,CAACrC,SAAA,CAAU/C,KAAK,CAAC,EAAE;MAC9D,EAAE,OAAOR,GAAA,EAAK;QACZ,IAAI,IAAA6F,QAAA,CAAApK,OAAO,EAACuE,GAAA,KAAQA,GAAA,CAAI7K,SAAS,EAAE;UACjCN,MAAA,CAAOsQ,MAAM,CAACC,IAAI,CAAC,oBAAoBpF,GAAA,EAAKhK,SAAA,EAAWiP,UAAA;QACzD;QACA,MAAMjF,GAAA;MACR;MAEAnL,MAAA,CAAOsQ,MAAM,CAACC,IAAI,CAAC,sBAAsB3N,EAAA,EAAIwN,UAAA;MAC7C,OAAO;IACT;IAEA,IAAIa,MAAA,GAAS,IAAA3L,iBAAA,CAAAC,gBAAgB,EAACnD,GAAA;IAC9B,IAAI;MAAEtB,QAAQ;MAAE+F;IAAK,CAAE,GAAGoK,MAAA;IAE1B;IACA;IACA;IACA,IAAI3N,KAAA,EAAiB8C,QAAA;IACrB,IAAI;MACD,CAAC9C,KAAA,EAAO;QAAE6C,UAAA,EAAYC;MAAQ,CAAE,CAAC,GAAG,MAAM3F,OAAA,CAAQoF,GAAG,CAAC,CACrD,IAAI,CAACjF,UAAU,CAACkF,WAAW,IAC3B,IAAAC,YAAA,CAAAC,sBAAsB,KACtB,IAAI,CAACpF,UAAU,CAACC,aAAa,GAC9B;IACH,EAAE,OAAOsK,GAAA,EAAK;MACZ;MACA;MACAM,oBAAA,CAAqB;QAAErJ,GAAA,EAAKQ,EAAA;QAAIjC,MAAA,EAAQ;MAAK;MAC7C,OAAO;IACT;IAEA;IACA;IACA;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAACuQ,QAAQ,CAAC/P,SAAA,KAAc,CAACuP,YAAA,EAAc;MAC9CnH,MAAA,GAAS;IACX;IAEA;IACA;IACA,IAAIzG,UAAA,GAAaF,EAAA;IAEjB;IACA;IACA;IACA9B,QAAA,GAAWA,QAAA,GACP,IAAA0C,oBAAA,CAAAC,mBAAmB,EAAC,IAAAnC,eAAA,CAAAC,cAAc,EAACT,QAAA,KACnCA,QAAA;IAEJ,IAAI6K,KAAA,GAAQ,IAAAnI,oBAAA,CAAAC,mBAAmB,EAAC3C,QAAA;IAChC,MAAMqQ,gBAAA,GAAmBvO,EAAA,CAAGJ,UAAU,CAAC,QAAQ,IAAA8C,iBAAA,CAAAC,gBAAgB,EAAC3C,EAAA,EAAI9B,QAAQ;IAE5E;IACA;IACA,KAAKoN,yBAAA,OAAI,CAAC6C,UAAU,CAACjQ,QAAA,CAAS,qBAA1BoN,yBAAC,CAAmCkD,WAAW,EAAE;MACnD3F,oBAAA,CAAqB;QAAErJ,GAAA,EAAKQ,EAAA;QAAIjC,MAAA,EAAQ;MAAK;MAC7C,OAAO,IAAIF,OAAA,CAAQ,OAAO;IAC5B;IAEA,MAAM4Q,mBAAA,GAAsB,CAAC,EAC3BF,gBAAA,IACAxF,KAAA,KAAUwF,gBAAA,KACT,CAAC,IAAArN,UAAA,CAAAC,cAAc,EAAC4H,KAAA,KACf,CAAC,IAAAxE,aAAA,CAAAC,eAAe,EAAC,IAAApD,WAAA,CAAAC,aAAa,EAAC0H,KAAA,GAAQwF,gBAAA,CAAgB,CAAC;IAG5D;IACA;IACA,MAAMG,iBAAA,GACJ,CAAC/Q,OAAA,CAAQgO,OAAO,KACf,MAAMtO,iBAAA,CAAkB;MACvBiB,MAAA,EAAQ0B,EAAA;MACRf,MAAA,EAAQ6M,SAAA,CAAU7M,MAAM;MACxBlB,MAAA,EAAQ;IACV;IAEF,IAAI0N,eAAA,IAAmBiD,iBAAA,EAAmB;MACxC9C,iBAAA,GAAoB;IACtB;IAEA,IAAIA,iBAAA,IAAqB1N,QAAA,KAAa,WAAW;MAC7CP,OAAA,CAAgBkO,kBAAkB,GAAG;MAEvC,IAAI7J,OAAA,CAAQC,GAAG,CAAC2B,mBAAmB,IAAI5D,EAAA,CAAGJ,UAAU,CAAC,MAAM;QACzD,MAAM+O,cAAA,GAAiB,IAAA5K,gBAAA,CAAAC,OAAe,EACpC,IAAAnF,YAAA,CAAAC,WAAW,EAAC,IAAAC,UAAA,CAAAC,SAAS,EAACT,SAAA,EAAWuN,SAAA,CAAU7M,MAAM,GAAG,OACpDyB,KAAA,EACA8C,QAAA,EACAS,KAAA,EACC2K,CAAA,IAAcnO,mBAAA,CAAoBmO,CAAA,EAAGlO,KAAA,GACtC,IAAI,CAACmB,OAAO;QAGd,IAAI8M,cAAA,CAAeE,YAAY,EAAE;UAC/BhG,oBAAA,CAAqB;YAAErJ,GAAA,EAAKQ,EAAA;YAAIjC,MAAA,EAAQ;UAAK;UAC7C,OAAO;QACT;QACA,IAAI,CAAC2Q,iBAAA,EAAmB;UACtBxO,UAAA,GAAayO,cAAA,CAAerQ,MAAM;QACpC;QAEA,IAAIqQ,cAAA,CAAexK,WAAW,IAAIwK,cAAA,CAAe1O,YAAY,EAAE;UAC7D;UACA;UACA/B,QAAA,GAAWyQ,cAAA,CAAe1O,YAAY;UACtCoO,MAAA,CAAOnQ,QAAQ,GAAG,IAAAW,YAAA,CAAAC,WAAW,EAACZ,QAAA;UAE9B,IAAI,CAACwQ,iBAAA,EAAmB;YACtBlP,GAAA,GAAM,IAAA+M,UAAA,CAAAC,oBAAoB,EAAC6B,MAAA;UAC7B;QACF;MACF,OAAO;QACLA,MAAA,CAAOnQ,QAAQ,GAAGuC,mBAAA,CAAoBvC,QAAA,EAAUwC,KAAA;QAEhD,IAAI2N,MAAA,CAAOnQ,QAAQ,KAAKA,QAAA,EAAU;UAChCA,QAAA,GAAWmQ,MAAA,CAAOnQ,QAAQ;UAC1BmQ,MAAA,CAAOnQ,QAAQ,GAAG,IAAAW,YAAA,CAAAC,WAAW,EAACZ,QAAA;UAE9B,IAAI,CAACwQ,iBAAA,EAAmB;YACtBlP,GAAA,GAAM,IAAA+M,UAAA,CAAAC,oBAAoB,EAAC6B,MAAA;UAC7B;QACF;MACF;IACF;IAEA,IAAI,CAAC,IAAA9C,WAAA,CAAAC,UAAU,EAACxL,EAAA,GAAK;MACnB,IAAIgC,OAAA,CAAQC,GAAG,CAACoG,QAAQ,KAAK,cAAc;QACzC,MAAM,IAAI5K,KAAA,CACR,iBAAC,GAAiB+B,GAAA,GAAI,gBAAaQ,EAAA,GAAG,8CACnC;MAEP;MACA6I,oBAAA,CAAqB;QAAErJ,GAAA,EAAKQ,EAAA;QAAIjC,MAAA,EAAQ;MAAK;MAC7C,OAAO;IACT;IAEAmC,UAAA,GAAa,IAAA0N,aAAA,CAAAC,YAAY,EAAC,IAAAnP,eAAA,CAAAC,cAAc,EAACuB,UAAA,GAAa4L,SAAA,CAAU7M,MAAM;IAEtE8J,KAAA,GAAQ,IAAAnI,oBAAA,CAAAC,mBAAmB,EAAC3C,QAAA;IAC5B,IAAI4Q,UAAA,GAAiE;IAErE,IAAI,IAAA5N,UAAA,CAAAC,cAAc,EAAC4H,KAAA,GAAQ;MACzB,MAAM3E,QAAA,GAAW,IAAA1B,iBAAA,CAAAC,gBAAgB,EAACzC,UAAA;MAClC,MAAM/B,UAAA,GAAaiG,QAAA,CAASlG,QAAQ;MAEpC,MAAM6Q,UAAA,GAAa,IAAA3N,WAAA,CAAAC,aAAa,EAAC0H,KAAA;MACjC+F,UAAA,GAAa,IAAAvK,aAAA,CAAAC,eAAe,EAACuK,UAAA,EAAY5Q,UAAA;MACzC,MAAM6Q,iBAAA,GAAoBjG,KAAA,KAAU5K,UAAA;MACpC,MAAM8Q,cAAA,GAAiBD,iBAAA,GACnB,IAAAE,cAAA,CAAAC,aAAa,EAACpG,KAAA,EAAO5K,UAAA,EAAY8F,KAAA,IAChC,CAAC;MAEN,IAAI,CAAC6K,UAAA,IAAeE,iBAAA,IAAqB,CAACC,cAAA,CAAenL,MAAM,EAAG;QAChE,MAAMsL,aAAA,GAAgB7R,MAAA,CAAO8R,IAAI,CAACN,UAAA,CAAWO,MAAM,EAAEC,MAAM,CACxDjM,KAAA,IAAU,CAACW,KAAK,CAACX,KAAA,CAAM,IAAI,CAACyL,UAAA,CAAWO,MAAM,CAAChM,KAAA,CAAM,CAACkM,QAAQ;QAGhE,IAAIJ,aAAA,CAActP,MAAM,GAAG,KAAK,CAAC4O,iBAAA,EAAmB;UAClD,IAAI1M,OAAA,CAAQC,GAAG,CAACoG,QAAQ,KAAK,cAAc;YACzCoH,OAAA,CAAQC,IAAI,CACV,EAAC,IACCV,iBAAA,GACK,uBACA,6BAA+B,IACrC,kCACC,cAAC,GAAcI,aAAA,CAAcjE,IAAI,CAC/B,QACA,0BAA4B;UAEpC;UAEA,MAAM,IAAI1N,KAAA,CACR,CAACuR,iBAAA,GACG,uBAAC,GAAyBxP,GAAA,GAAI,sCAAmC4P,aAAA,CAAcjE,IAAI,CACjF,QACA,oCACF,2BAAC,GAA6BhN,UAAA,GAAW,8CAA6C4K,KAAA,GAAM,KAAG,KACjG,8CAAC,IACCiG,iBAAA,GACI,8BACA,sBAAqB,CAC1B;QAEP;MACF,OAAO,IAAIA,iBAAA,EAAmB;QAC5BhP,EAAA,GAAK,IAAAuM,UAAA,CAAAC,oBAAoB,EACvBjP,MAAA,CAAOC,MAAM,CAAC,CAAC,GAAG4G,QAAA,EAAU;UAC1BlG,QAAA,EAAU+Q,cAAA,CAAenL,MAAM;UAC/BG,KAAA,EAAO,IAAA0L,KAAA,CAAAC,IAAI,EAAC3L,KAAA,EAAOgL,cAAA,CAAelH,MAAM;QAC1C;MAEJ,OAAO;QACL;QACAxK,MAAA,CAAOC,MAAM,CAACyG,KAAA,EAAO6K,UAAA;MACvB;IACF;IAEA,IAAI,CAACrD,eAAA,EAAiB;MACpBrO,MAAA,CAAOsQ,MAAM,CAACC,IAAI,CAAC,oBAAoB3N,EAAA,EAAIwN,UAAA;IAC7C;IAEA,MAAMqC,YAAA,GAAe,IAAI,CAAC3R,QAAQ,KAAK,UAAU,IAAI,CAACA,QAAQ,KAAK;IAEnE,IAAI;UAsKA4R,mCAAA,EAAAC,yBAAA,EACAC,gBAAA;MAtKF,IAAIC,SAAA,GAAY,MAAM,IAAI,CAACC,YAAY,CAAC;QACtCnH,KAAA;QACA7K,QAAA;QACA+F,KAAA;QACAjE,EAAA;QACAE,UAAA;QACAsN,UAAA;QACAvO,MAAA,EAAQ6M,SAAA,CAAU7M,MAAM;QACxBkR,SAAA,EAAWrE,SAAA,CAAUqE,SAAS;QAC9B9I,aAAA,EAAeqH,iBAAA;QACfhH,wBAAA,EAA0B/J,OAAA,CAAQ+J,wBAAwB;QAC1D+D,eAAA,EAAiBA,eAAA,IAAmB,CAAC,IAAI,CAAC2E,UAAU;QACpD3B;MACF;MAEA,IAAI,CAAChD,eAAA,IAAmB,CAAC9N,OAAA,CAAQgO,OAAO,EAAE;QACxC,MAAM,IAAI,CAAC1B,IAAI,CACbjK,EAAA,EACA,gBAAgBiQ,SAAA,GAAYA,SAAA,CAAU/P,UAAU,GAAG2D,SAAA,EACnDiI,SAAA,CAAU7M,MAAM;MAEpB;MAEA,IAAI,WAAWgR,SAAA,IAAavB,iBAAA,EAAmB;QAC7CxQ,QAAA,GAAW+R,SAAA,CAAUlH,KAAK,IAAIA,KAAA;QAC9BA,KAAA,GAAQ7K,QAAA;QAER,IAAI,CAACsP,UAAA,CAAW7B,OAAO,EAAE;UACvB1H,KAAA,GAAQ1G,MAAA,CAAOC,MAAM,CAAC,CAAC,GAAGyS,SAAA,CAAUhM,KAAK,IAAI,CAAC,GAAGA,KAAA;QACnD;QAEA,MAAMoM,qBAAA,GAAwB,IAAA7R,YAAA,CAAAC,WAAW,EAAC4P,MAAA,CAAOnQ,QAAQ,IACrD,IAAAQ,eAAA,CAAAC,cAAc,EAAC0P,MAAA,CAAOnQ,QAAQ,IAC9BmQ,MAAA,CAAOnQ,QAAQ;QAEnB,IAAI4Q,UAAA,IAAc5Q,QAAA,KAAamS,qBAAA,EAAuB;UACpD9S,MAAA,CAAO8R,IAAI,CAACP,UAAA,EAAYwB,OAAO,CAAEC,GAAA;YAC/B,IAAIzB,UAAA,IAAc7K,KAAK,CAACsM,GAAA,CAAI,KAAKzB,UAAU,CAACyB,GAAA,CAAI,EAAE;cAChD,OAAOtM,KAAK,CAACsM,GAAA,CAAI;YACnB;UACF;QACF;QAEA,IAAI,IAAArP,UAAA,CAAAC,cAAc,EAACjD,QAAA,GAAW;UAC5B,MAAMsS,UAAA,GACJ,CAAChD,UAAA,CAAW7B,OAAO,IAAIsE,SAAA,CAAU/P,UAAU,GACvC+P,SAAA,CAAU/P,UAAU,GACpB,IAAArB,YAAA,CAAAC,WAAW,EACT,IAAAC,UAAA,CAAAC,SAAS,EACP,IAAI4I,GAAA,CAAI5H,EAAA,EAAI6H,QAAA,CAASF,IAAI,EAAEzJ,QAAQ,EACnC4N,SAAA,CAAU7M,MAAM,GAElB;UAGR,IAAIwR,SAAA,GAAYD,UAAA;UAEhB,IAAI,IAAAhS,YAAA,CAAAC,WAAW,EAACgS,SAAA,GAAY;YAC1BA,SAAA,GAAY,IAAA/R,eAAA,CAAAC,cAAc,EAAC8R,SAAA;UAC7B;UAEA,IAAIzO,OAAA,CAAQC,GAAG,CAACmK,mBAAmB,EAAE;YACnC,MAAMsE,YAAA,GAAe,IAAAjN,oBAAA,CAAAC,mBAAmB,EAAC+M,SAAA,EAAW,IAAI,CAAC5O,OAAO;YAChEiK,SAAA,CAAU7M,MAAM,GAAGyR,YAAA,CAAapE,cAAc,IAAIR,SAAA,CAAU7M,MAAM;YAClEwR,SAAA,GAAYC,YAAA,CAAaxS,QAAQ;UACnC;UACA,MAAM6Q,UAAA,GAAa,IAAA3N,WAAA,CAAAC,aAAa,EAACnD,QAAA;UACjC,MAAMyS,aAAA,GAAgB,IAAApM,aAAA,CAAAC,eAAe,EAACuK,UAAA,EACpC,IAAInH,GAAA,CAAI6I,SAAA,EAAW5I,QAAA,CAASF,IAAI,EAAEzJ,QAAQ;UAG5C,IAAIyS,aAAA,EAAe;YACjBpT,MAAA,CAAOC,MAAM,CAACyG,KAAA,EAAO0M,aAAA;UACvB;QACF;MACF;MAEA;MACA,IAAI,UAAUV,SAAA,EAAW;QACvB,IAAIA,SAAA,CAAUxL,IAAI,KAAK,qBAAqB;UAC1C,OAAO,IAAI,CAACsF,MAAM,CAACpD,MAAA,EAAQsJ,SAAA,CAAU9K,MAAM,EAAE8K,SAAA,CAAU/K,KAAK,EAAEvH,OAAA;QAChE,OAAO;UACLkL,oBAAA,CAAqB;YAAErJ,GAAA,EAAKyQ,SAAA,CAAUlL,WAAW;YAAEhH,MAAA,EAAQ;UAAK;UAChE,OAAO,IAAIF,OAAA,CAAQ,OAAO;QAC5B;MACF;MAEA,MAAM+S,SAAA,GAAiBX,SAAA,CAAUY,SAAS;MAC1C,IAAID,SAAA,IAAaA,SAAA,CAAUE,qBAAqB,EAAE;QAChD,MAAMC,OAAA,GAAU,EAAE,CAACC,MAAM,CAACJ,SAAA,CAAUE,qBAAqB;QAEzDC,OAAA,CAAQT,OAAO,CAAEW,MAAA;UACf,IAAAC,OAAA,CAAAC,sBAAsB,EAACF,MAAA,CAAOG,KAAK;QACrC;MACF;MAEA;MACA,IAAI,CAACnB,SAAA,CAAUoB,OAAO,IAAIpB,SAAA,CAAUqB,OAAO,KAAKrB,SAAA,CAAUmB,KAAK,EAAE;QAC/D,IACEnB,SAAA,CAAUmB,KAAK,CAACG,SAAS,IACzBtB,SAAA,CAAUmB,KAAK,CAACG,SAAS,CAACC,YAAY,EACtC;UACA;UACA7T,OAAA,CAAQsB,MAAM,GAAG;UAEjB,MAAM8F,WAAA,GAAckL,SAAA,CAAUmB,KAAK,CAACG,SAAS,CAACC,YAAY;UAE1D;UACA;UACA;UACA,IACEzM,WAAA,CAAYnF,UAAU,CAAC,QACvBqQ,SAAA,CAAUmB,KAAK,CAACG,SAAS,CAACE,sBAAsB,KAAK,OACrD;YACA,MAAMC,UAAA,GAAa,IAAAhP,iBAAA,CAAAC,gBAAgB,EAACoC,WAAA;YACpC2M,UAAA,CAAWxT,QAAQ,GAAGuC,mBAAA,CACpBiR,UAAA,CAAWxT,QAAQ,EACnBwC,KAAA;YAGF,MAAM;cAAElB,GAAA,EAAK2F,MAAM;cAAEnF,EAAA,EAAIkF;YAAK,CAAE,GAAGnF,YAAA,CACjC,IAAI,EACJgF,WAAA,EACAA,WAAA;YAEF,OAAO,IAAI,CAACgF,MAAM,CAACpD,MAAA,EAAQxB,MAAA,EAAQD,KAAA,EAAOvH,OAAA;UAC5C;UACAkL,oBAAA,CAAqB;YAAErJ,GAAA,EAAKuF,WAAA;YAAahH,MAAA,EAAQ;UAAK;UACtD,OAAO,IAAIF,OAAA,CAAQ,OAAO;QAC5B;QAEAiO,SAAA,CAAUqE,SAAS,GAAG,CAAC,CAACF,SAAA,CAAUmB,KAAK,CAACO,WAAW;QAEnD;QACA,IAAI1B,SAAA,CAAUmB,KAAK,CAACjJ,QAAQ,KAAK9B,kBAAA,EAAoB;UACnD,IAAIuL,aAAA;UAEJ,IAAI;YACF,MAAM,IAAI,CAACC,cAAc,CAAC;YAC1BD,aAAA,GAAgB;UAClB,EAAE,OAAOE,CAAA,EAAG;YACVF,aAAA,GAAgB;UAClB;UAEA3B,SAAA,GAAY,MAAM,IAAI,CAACC,YAAY,CAAC;YAClCnH,KAAA,EAAO6I,aAAA;YACP1T,QAAA,EAAU0T,aAAA;YACV3N,KAAA;YACAjE,EAAA;YACAE,UAAA;YACAsN,UAAA,EAAY;cAAE7B,OAAA,EAAS;YAAM;YAC7B1M,MAAA,EAAQ6M,SAAA,CAAU7M,MAAM;YACxBkR,SAAA,EAAWrE,SAAA,CAAUqE,SAAS;YAC9B4B,UAAA,EAAY;UACd;UAEA,IAAI,UAAU9B,SAAA,EAAW;YACvB,MAAM,IAAIxS,KAAA,CAAO;UACnB;QACF;MACF;MAEA,IACEgO,eAAA,IACA,IAAI,CAACvN,QAAQ,KAAK,aAClB,EAAA6R,yBAAA,GAAArG,IAAA,CAAKsI,aAAa,CAACZ,KAAK,sBAAxBtB,mCAAA,GAAAC,yBAAA,CAA0BwB,SAAS,qBAAnCzB,mCAAA,CAAqCmC,UAAU,MAAK,SACpDjC,gBAAA,GAAAC,SAAA,CAAUmB,KAAK,qBAAfpB,gBAAA,CAAiBuB,SAAS,GAC1B;QACA;QACA;QACAtB,SAAA,CAAUmB,KAAK,CAACG,SAAS,CAACU,UAAU,GAAG;MACzC;UAI0CC,gBAAA;MAF1C;MACA,MAAMC,mBAAA,GACJxU,OAAA,CAAQgO,OAAO,IAAIG,SAAA,CAAU/C,KAAK,MAAM,CAAAmJ,gBAAA,GAAAjC,SAAA,CAAUlH,KAAK,YAAfmJ,gBAAA,GAAmBnJ,KAAI;UAG/DqJ,eAAA;MADF,MAAMC,YAAA,GACJ,CAAAD,eAAA,GAAAzU,OAAA,CAAQ4P,MAAM,YAAd6E,eAAA,GAAmB,CAAC3G,eAAA,IAAmB,CAAC0G,mBAAA;MAC1C,MAAMG,WAAA,GAAcD,YAAA,GAAe;QAAE5I,CAAA,EAAG;QAAGG,CAAA,EAAG;MAAE,IAAI;MACpD,MAAM2I,mBAAA,GAAsBlH,YAAA,WAAAA,YAAA,GAAgBiH,WAAA;MAE5C;MACA,MAAME,mBAAA,GAAsB;QAC1B,GAAG1G,SAAS;QACZ/C,KAAA;QACA7K,QAAA;QACA+F,KAAA;QACA3F,MAAA,EAAQC,SAAA;QACR6R,UAAA,EAAY;MACd;MAEA;MACA;MACA;MACA;MACA;MACA,IAAI3E,eAAA,IAAmBoE,YAAA,EAAc;YAmBjC4C,oCAAA,EAAAC,0BAAA,EACAC,iBAAA;QAnBF1C,SAAA,GAAY,MAAM,IAAI,CAACC,YAAY,CAAC;UAClCnH,KAAA,EAAO,IAAI,CAAC7K,QAAQ;UACpBA,QAAA,EAAU,IAAI,CAACA,QAAQ;UACvB+F,KAAA;UACAjE,EAAA;UACAE,UAAA;UACAsN,UAAA,EAAY;YAAE7B,OAAA,EAAS;UAAM;UAC7B1M,MAAA,EAAQ6M,SAAA,CAAU7M,MAAM;UACxBkR,SAAA,EAAWrE,SAAA,CAAUqE,SAAS;UAC9B1E,eAAA,EAAiBA,eAAA,IAAmB,CAAC,IAAI,CAAC2E;QAC5C;QAEA,IAAI,UAAUH,SAAA,EAAW;UACvB,MAAM,IAAIxS,KAAA,CAAM,kCAAC,GAAkC,IAAI,CAACS,QAAQ;QAClE;QAEA,IACE,IAAI,CAACA,QAAQ,KAAK,aAClB,EAAAwU,0BAAA,GAAAhJ,IAAA,CAAKsI,aAAa,CAACZ,KAAK,sBAAxBqB,oCAAA,GAAAC,0BAAA,CAA0BnB,SAAS,qBAAnCkB,oCAAA,CAAqCR,UAAU,MAAK,SACpDU,iBAAA,GAAA1C,SAAA,CAAUmB,KAAK,qBAAfuB,iBAAA,CAAiBpB,SAAS,GAC1B;UACA;UACA;UACAtB,SAAA,CAAUmB,KAAK,CAACG,SAAS,CAACU,UAAU,GAAG;QACzC;QAEA,IAAI;UACF,MAAM,IAAI,CAAC/D,GAAG,CAACsE,mBAAA,EAAqBvC,SAAA,EAAWsC,mBAAA;QACjD,EAAE,OAAOhK,GAAA,EAAK;UACZ,IAAI,IAAA6F,QAAA,CAAApK,OAAO,EAACuE,GAAA,KAAQA,GAAA,CAAI7K,SAAS,EAAE;YACjCN,MAAA,CAAOsQ,MAAM,CAACC,IAAI,CAAC,oBAAoBpF,GAAA,EAAKhK,SAAA,EAAWiP,UAAA;UACzD;UACA,MAAMjF,GAAA;QACR;QAEA,OAAO;MACT;MAEAnL,MAAA,CAAOsQ,MAAM,CAACC,IAAI,CAAC,uBAAuB3N,EAAA,EAAIwN,UAAA;MAC9C,IAAI,CAACQ,WAAW,CAACrH,MAAA,EAAQnH,GAAA,EAAKQ,EAAA,EAAIrC,OAAA;MAElC;MACA;MACA;MACA,MAAMiV,eAAA,GACJnH,eAAA,IACA,CAAC8G,mBAAA,IACD,CAACvG,gBAAA,IACD,CAAC8B,YAAA,IACD,IAAA+E,cAAA,CAAAC,mBAAmB,EAACN,mBAAA,EAAqB,IAAI,CAACzG,KAAK;MAErD,IAAI,CAAC6G,eAAA,EAAiB;QACpB,IAAI;UACF,MAAM,IAAI,CAAC1E,GAAG,CAACsE,mBAAA,EAAqBvC,SAAA,EAAWsC,mBAAA;QACjD,EAAE,OAAOzI,CAAA,EAAQ;UACf,IAAIA,CAAA,CAAEpM,SAAS,EAAEuS,SAAA,CAAUhJ,KAAK,GAAGgJ,SAAA,CAAUhJ,KAAK,IAAI6C,CAAA,MACjD,MAAMA,CAAA;QACb;QAEA,IAAImG,SAAA,CAAUhJ,KAAK,EAAE;UACnB,IAAI,CAACwE,eAAA,EAAiB;YACpBrO,MAAA,CAAOsQ,MAAM,CAACC,IAAI,CAChB,oBACAsC,SAAA,CAAUhJ,KAAK,EACf1I,SAAA,EACAiP,UAAA;UAEJ;UAEA,MAAMyC,SAAA,CAAUhJ,KAAK;QACvB;QAEA,IAAIjF,OAAA,CAAQC,GAAG,CAACmK,mBAAmB,EAAE;UACnC,IAAIN,SAAA,CAAU7M,MAAM,EAAE;YACpB8T,QAAA,CAASC,eAAe,CAACC,IAAI,GAAGnH,SAAA,CAAU7M,MAAM;UAClD;QACF;QAEA,IAAI,CAACwM,eAAA,EAAiB;UACpBrO,MAAA,CAAOsQ,MAAM,CAACC,IAAI,CAAC,uBAAuB3N,EAAA,EAAIwN,UAAA;QAChD;QAEA;QACA,MAAM0F,SAAA,GAAY;QAClB,IAAIb,YAAA,IAAgBa,SAAA,CAAU5T,IAAI,CAACU,EAAA,GAAK;UACtC,IAAI,CAACiO,YAAY,CAACjO,EAAA;QACpB;MACF;MAEA,OAAO;IACT,EAAE,OAAOuI,GAAA,EAAK;MACZ,IAAI,IAAA6F,QAAA,CAAApK,OAAO,EAACuE,GAAA,KAAQA,GAAA,CAAI7K,SAAS,EAAE;QACjC,OAAO;MACT;MACA,MAAM6K,GAAA;IACR;EACF;EAEAyF,YACErH,MAAqB,EACrBnH,GAAW,EACXQ,EAAU,EACVrC,OAA+B,EACzB;IADN,IAAAA,OAAA,aAAAA,OAAA,GAA6B,CAAC;IAE9B,IAAIqE,OAAA,CAAQC,GAAG,CAACoG,QAAQ,KAAK,cAAc;MACzC,IAAI,OAAOvC,MAAA,CAAOC,OAAO,KAAK,aAAa;QACzC0J,OAAA,CAAQxI,KAAK,CAAE;QACf;MACF;MAEA,IAAI,OAAOnB,MAAA,CAAOC,OAAO,CAACY,MAAA,CAAO,KAAK,aAAa;QACjD8I,OAAA,CAAQxI,KAAK,CAAC,0BAAC,GAA0BN,MAAA,GAAO;QAChD;MACF;IACF;IAEA,IAAIA,MAAA,KAAW,eAAe,IAAAjH,MAAA,CAAAyT,MAAM,QAAOnT,EAAA,EAAI;MAC7C,IAAI,CAACoT,QAAQ,GAAGzV,OAAA,CAAQgO,OAAO;MAC/B7F,MAAA,CAAOC,OAAO,CAACY,MAAA,CAAO,CACpB;QACEnH,GAAA;QACAQ,EAAA;QACArC,OAAA;QACA0V,GAAA,EAAK;QACL9C,GAAA,EAAM,IAAI,CAAChH,IAAI,GAAG5C,MAAA,KAAW,cAAc,IAAI,CAAC4C,IAAI,GAAGpM,SAAA;MACzD;MACA;MACA;MACA;MACA,IACA6C,EAAA;IAEJ;EACF;EAEA,MAAMsT,qBACJ/K,GAAgD,EAChDrK,QAAgB,EAChB+F,KAAqB,EACrBjE,EAAU,EACVwN,UAA2B,EAC3B+F,aAAuB,EACY;IACnC9D,OAAA,CAAQxI,KAAK,CAACsB,GAAA;IAEd,IAAIA,GAAA,CAAI7K,SAAS,EAAE;MACjB;MACA,MAAM6K,GAAA;IACR;IAEA,IAAI,IAAApF,YAAA,CAAAqQ,YAAY,EAACjL,GAAA,KAAQgL,aAAA,EAAe;MACtCnW,MAAA,CAAOsQ,MAAM,CAACC,IAAI,CAAC,oBAAoBpF,GAAA,EAAKvI,EAAA,EAAIwN,UAAA;MAEhD;MACA;MACA;MACA;MAEA;MACA3E,oBAAA,CAAqB;QACnBrJ,GAAA,EAAKQ,EAAA;QACLjC,MAAA,EAAQ;MACV;MAEA;MACA;MACA,MAAMT,sBAAA;IACR;IAEA,IAAI;MACF,IAAI8T,KAAA;MACJ,MAAM;QAAEnQ,IAAA,EAAM4P,SAAS;QAAE4C;MAAW,CAAE,GAAG,MAAM,IAAI,CAAC5B,cAAc,CAChE;MAGF,MAAM5B,SAAA,GAAsC;QAC1CmB,KAAA;QACAP,SAAA;QACA4C,WAAA;QACAlL,GAAA;QACAtB,KAAA,EAAOsB;MACT;MAEA,IAAI,CAAC0H,SAAA,CAAUmB,KAAK,EAAE;QACpB,IAAI;UACFnB,SAAA,CAAUmB,KAAK,GAAG,MAAM,IAAI,CAACsC,eAAe,CAAC7C,SAAA,EAAW;YACtDtI,GAAA;YACArK,QAAA;YACA+F;UACF;QACF,EAAE,OAAO0P,MAAA,EAAQ;UACflE,OAAA,CAAQxI,KAAK,CAAC,2CAA2C0M,MAAA;UACzD1D,SAAA,CAAUmB,KAAK,GAAG,CAAC;QACrB;MACF;MAEA,OAAOnB,SAAA;IACT,EAAE,OAAO2D,YAAA,EAAc;MACrB,OAAO,IAAI,CAACN,oBAAoB,CAC9B,IAAAlF,QAAA,CAAApK,OAAO,EAAC4P,YAAA,IAAgBA,YAAA,GAAe,IAAInW,KAAA,CAAMmW,YAAA,GAAe,KAChE1V,QAAA,EACA+F,KAAA,EACAjE,EAAA,EACAwN,UAAA,EACA;IAEJ;EACF;EAEA,MAAM0C,aAAa5M,KA4BlB,EAAE;IA5BgB;MACjByF,KAAA,EAAO8K,cAAc;MACrB3V,QAAQ;MACR+F,KAAK;MACLjE,EAAE;MACFE,UAAU;MACVsN,UAAU;MACVvO,MAAM;MACNoI,aAAa;MACb8I,SAAS;MACTzI,wBAAwB;MACxB+D,eAAe;MACfgD,mBAAmB;MACnBsD;IAAU,CAeX,GA5BkBzO,KAAA;IA6BjB;;;;;;IAMA,IAAIyF,KAAA,GAAQ8K,cAAA;IAEZ,IAAI;UA6EAC,YAAA,EACAC,aAAA,EAKEC,aAAA,EAyDsBC,cAAA;MA3I1B,IAAIC,YAAA,GAA6C,IAAI,CAAC/F,UAAU,CAACpF,KAAA,CAAM;MACvE,IAAIyE,UAAA,CAAW7B,OAAO,IAAIuI,YAAA,IAAgB,IAAI,CAACnL,KAAK,KAAKA,KAAA,EAAO;QAC9D,OAAOmL,YAAA;MACT;MAEA,MAAMhL,eAAA,GAAkBJ,mBAAA,CAAoB;QAAEC,KAAA;QAAOhL,MAAA,EAAQ;MAAK;MAElE,IAAIsJ,aAAA,EAAe;QACjB6M,YAAA,GAAerQ,SAAA;MACjB;MAEA,IAAIsQ,eAAA,GACFD,YAAA,IACA,EAAE,aAAaA,YAAW,KAC1BlS,OAAA,CAAQC,GAAG,CAACoG,QAAQ,KAAK,gBACrB6L,YAAA,GACArQ,SAAA;MAEN,MAAM4D,YAAA,GAAegE,eAAA;MACrB,MAAM2I,mBAAA,GAA2C;QAC/C5O,QAAA,EAAU,IAAI,CAACxH,UAAU,CAACqW,WAAW,CAAC;UACpC1M,IAAA,EAAM,IAAA4E,UAAA,CAAAC,oBAAoB,EAAC;YAAEtO,QAAA;YAAU+F;UAAM;UAC7CqQ,iBAAA,EAAmB;UACnBhW,MAAA,EAAQyT,UAAA,GAAa,SAAS7R,UAAA;UAC9BjB;QACF;QACAoI,aAAA,EAAe;QACfC,cAAA,EAAgB,IAAI,CAAC4E,KAAK;QAC1B3E,SAAA,EAAW;QACXJ,aAAA,EAAeM,YAAA,GAAe,IAAI,CAAC8M,GAAG,GAAG,IAAI,CAACC,GAAG;QACjDhN,YAAA,EAAc,CAAC2I,SAAA;QACf/I,UAAA,EAAY;QACZM,wBAAA;QACAD;MACF;MAEA,IAAInC,IAAA,GAKFmG,eAAA,IAAmB,CAACgD,mBAAA,GAChB,OACA,MAAMrJ,qBAAA,CAAsB;QAC1BC,SAAA,EAAWA,CAAA,KAAM6B,aAAA,CAAckN,mBAAA;QAC/B9V,MAAA,EAAQyT,UAAA,GAAa,SAAS7R,UAAA;QAC9BjB,MAAA,EAAQA,MAAA;QACRlB,MAAA,EAAQ;MACV,GAAGuK,KAAK,CAAEC,GAAA;QACR;QACA;QACA;QACA;QACA,IAAIkD,eAAA,EAAiB;UACnB,OAAO;QACT;QACA,MAAMlD,GAAA;MACR;MAEN;MACA;MACA,IAAIjD,IAAA,KAASpH,QAAA,KAAa,aAAaA,QAAA,KAAa,MAAK,GAAI;QAC3DoH,IAAA,CAAKC,MAAM,GAAG1B,SAAA;MAChB;MAEA,IAAI4H,eAAA,EAAiB;QACnB,IAAI,CAACnG,IAAA,EAAM;UACTA,IAAA,GAAO;YAAEG,IAAA,EAAMiE,IAAA,CAAKsI,aAAa,CAACZ;UAAM;QAC1C,OAAO;UACL9L,IAAA,CAAKG,IAAI,GAAGiE,IAAA,CAAKsI,aAAa,CAACZ,KAAK;QACtC;MACF;MAEAlI,eAAA;MAEA,IACE,CAAA5D,IAAA,qBAAAwO,YAAA,GAAAxO,IAAA,CAAMC,MAAM,qBAAZuO,YAAA,CAAcrP,IAAI,MAAK,uBACvB,CAAAa,IAAA,qBAAAyO,aAAA,GAAAzO,IAAA,CAAMC,MAAM,qBAAZwO,aAAA,CAActP,IAAI,MAAK,qBACvB;QACA,OAAOa,IAAA,CAAKC,MAAM;MACpB;MAEA,IAAI,CAAAD,IAAA,qBAAA0O,aAAA,GAAA1O,IAAA,CAAMC,MAAM,qBAAZyO,aAAA,CAAcvP,IAAI,MAAK,WAAW;QACpC,MAAMgQ,aAAA,GAAgB,IAAA7T,oBAAA,CAAAC,mBAAmB,EAACyE,IAAA,CAAKC,MAAM,CAACtF,YAAY;QAClE,MAAMS,KAAA,GAAQ,MAAM,IAAI,CAAC1C,UAAU,CAACkF,WAAW;QAE/C;QACA;QACA;QACA;QACA,IAAI,CAACuI,eAAA,IAAmB/K,KAAA,CAAMM,QAAQ,CAACyT,aAAA,GAAgB;UACrD1L,KAAA,GAAQ0L,aAAA;UACRvW,QAAA,GAAWoH,IAAA,CAAKC,MAAM,CAACtF,YAAY;UACnCgE,KAAA,GAAQ;YAAE,GAAGA,KAAK;YAAE,GAAGqB,IAAA,CAAKC,MAAM,CAACnB,QAAQ,CAACH;UAAM;UAClD/D,UAAA,GAAa,IAAAxB,eAAA,CAAAC,cAAc,EACzB,IAAA8E,oBAAA,CAAAC,mBAAmB,EAAC4B,IAAA,CAAKC,MAAM,CAACnB,QAAQ,CAAClG,QAAQ,EAAE,IAAI,CAAC2D,OAAO,EAC5D3D,QAAQ;UAGb;UACAgW,YAAA,GAAe,IAAI,CAAC/F,UAAU,CAACpF,KAAA,CAAM;UACrC,IACEyE,UAAA,CAAW7B,OAAO,IAClBuI,YAAA,IACA,IAAI,CAACnL,KAAK,KAAKA,KAAA,IACf,CAAC1B,aAAA,EACD;YACA;YACA;YACA;YACA,OAAO;cAAE,GAAG6M,YAAY;cAAEnL;YAAM;UAClC;QACF;MACF;MAEA,IAAI,IAAA2L,WAAA,CAAAC,UAAU,EAAC5L,KAAA,GAAQ;QACrBF,oBAAA,CAAqB;UAAErJ,GAAA,EAAKQ,EAAA;UAAIjC,MAAA,EAAQ;QAAK;QAC7C,OAAO,IAAIF,OAAA,CAAe,OAAO;MACnC;MAEA,MAAMoS,SAAA,GACJkE,eAAA,KACC,MAAM,IAAI,CAACtC,cAAc,CAAC9I,KAAA,EAAO1F,IAAI,CACnCuR,GAAA,KAAS;QACR/D,SAAA,EAAW+D,GAAA,CAAI3T,IAAI;QACnBwS,WAAA,EAAamB,GAAA,CAAInB,WAAW;QAC5BpC,OAAA,EAASuD,GAAA,CAAIC,GAAG,CAACxD,OAAO;QACxBC,OAAA,EAASsD,GAAA,CAAIC,GAAG,CAACvD;MACnB;MAGJ,IAAItP,OAAA,CAAQC,GAAG,CAACoG,QAAQ,KAAK,cAAc;QACzC,MAAM;UAAEyM;QAAkB,CAAE,GAAGC,OAAA,CAAQ;QACvC,IAAI,CAACD,kBAAA,CAAmB7E,SAAA,CAAUY,SAAS,GAAG;UAC5C,MAAM,IAAIpT,KAAA,CACR,wDAAC,GAAwDS,QAAA,GAAS;QAEtE;MACF;MACA,MAAM8W,iBAAA,GAAoB1P,IAAA,qBAAA2O,cAAA,GAAA3O,IAAA,CAAM7D,QAAQ,qBAAdwS,cAAA,CAAgB7R,OAAO,CAACC,GAAG,CAAC;MAEtD,MAAM4S,eAAA,GAAkBhF,SAAA,CAAUoB,OAAO,IAAIpB,SAAA,CAAUqB,OAAO;MAE9D;MACA;MACA,IAAI0D,iBAAA,KAAqB1P,IAAA,oBAAAA,IAAA,CAAME,QAAQ,GAAE;QACvC,OAAO,IAAI,CAACgP,GAAG,CAAClP,IAAA,CAAKE,QAAQ,CAAC;MAChC;MAEA,MAAM;QAAE4L,KAAK;QAAEzL;MAAQ,CAAE,GAAG,MAAM,IAAI,CAACuP,QAAQ,CAAC;QAC9C,IAAID,eAAA,EAAiB;UACnB,IAAI,CAAA3P,IAAA,oBAAAA,IAAA,CAAMG,IAAI,KAAI,CAACuP,iBAAA,EAAmB;YACpC,OAAO;cAAErP,QAAA,EAAUL,IAAA,CAAKK,QAAQ;cAAEyL,KAAA,EAAO9L,IAAA,CAAKG;YAAK;UACrD;UAEA,MAAMD,QAAA,GAAW,CAAAF,IAAA,oBAAAA,IAAA,CAAME,QAAQ,IAC3BF,IAAA,CAAKE,QAAQ,GACb,IAAI,CAACxH,UAAU,CAACqW,WAAW,CAAC;YAC1B1M,IAAA,EAAM,IAAA4E,UAAA,CAAAC,oBAAoB,EAAC;cAAEtO,QAAA;cAAU+F;YAAM;YAC7C3F,MAAA,EAAQ4B,UAAA;YACRjB;UACF;UAEJ,MAAMkW,OAAA,GAAU,MAAMjO,aAAA,CAAc;YAClC1B,QAAA;YACA8B,cAAA,EAAgB,IAAI,CAAC4E,KAAK;YAC1B3E,SAAA,EAAW;YACXJ,aAAA,EAAe6N,iBAAA,GAAoB,CAAC,IAAI,IAAI,CAACR,GAAG;YAChDhN,YAAA,EAAc,CAAC2I,SAAA;YACf/I,UAAA,EAAY;YACZM;UACF;UAEA,OAAO;YACL/B,QAAA,EAAUwP,OAAA,CAAQxP,QAAQ;YAC1ByL,KAAA,EAAO+D,OAAA,CAAQ1P,IAAI,IAAI,CAAC;UAC1B;QACF;QAEA,OAAO;UACLrD,OAAA,EAAS,CAAC;UACVgP,KAAA,EAAO,MAAM,IAAI,CAACsC,eAAe,CAC/BzD,SAAA,CAAUY,SAAS;UACnB;UACA;YACE3S,QAAA;YACA+F,KAAA;YACA3F,MAAA,EAAQ0B,EAAA;YACRf,MAAA;YACA4C,OAAA,EAAS,IAAI,CAACA,OAAO;YACrBgD,aAAA,EAAe,IAAI,CAACA;UACtB;QAEJ;MACF;MAEA;MACA;MACA;MACA,IAAIoL,SAAA,CAAUqB,OAAO,IAAI8C,mBAAA,CAAoB5O,QAAQ,IAAIG,QAAA,EAAU;QACjE,OAAO,IAAI,CAAC6O,GAAG,CAAC7O,QAAA,CAAS;MAC3B;MAEA;MACA;MACA,IACE,CAAC,IAAI,CAACwK,SAAS,IACfF,SAAA,CAAUoB,OAAO,IACjBrP,OAAA,CAAQC,GAAG,CAACoG,QAAQ,KAAK,iBACzB,CAACoD,eAAA,EACD;QACAvE,aAAA,CACE3J,MAAA,CAAOC,MAAM,CAAC,CAAC,GAAG4W,mBAAA,EAAqB;UACrC3M,YAAA,EAAc;UACdD,YAAA,EAAc;UACdL,aAAA,EAAe,IAAI,CAACoN;QACtB,IACAjM,KAAK,CAAC,OAAO;MACjB;MAEA8I,KAAA,CAAMG,SAAS,GAAGhU,MAAA,CAAOC,MAAM,CAAC,CAAC,GAAG4T,KAAA,CAAMG,SAAS;MACnDtB,SAAA,CAAUmB,KAAK,GAAGA,KAAA;MAClBnB,SAAA,CAAUlH,KAAK,GAAGA,KAAA;MAClBkH,SAAA,CAAUhM,KAAK,GAAGA,KAAA;MAClBgM,SAAA,CAAU/P,UAAU,GAAGA,UAAA;MACvB,IAAI,CAACiO,UAAU,CAACpF,KAAA,CAAM,GAAGkH,SAAA;MAEzB,OAAOA,SAAA;IACT,EAAE,OAAO1H,GAAA,EAAK;MACZ,OAAO,IAAI,CAAC+K,oBAAoB,CAC9B,IAAAlF,QAAA,CAAAgH,cAAc,EAAC7M,GAAA,GACfrK,QAAA,EACA+F,KAAA,EACAjE,EAAA,EACAwN,UAAA;IAEJ;EACF;EAEQU,IACNnC,KAAwB,EACxBzG,IAAsB,EACtBgN,WAA4C,EAC7B;IACf,IAAI,CAACvG,KAAK,GAAGA,KAAA;IAEb,OAAO,IAAI,CAACsJ,GAAG,CACb/P,IAAA,EACA,IAAI,CAAC6I,UAAU,CAAC,QAAQ,CAAC0C,SAAS,EAClCyB,WAAA;EAEJ;EAEA;;;;EAIAgD,eAAeC,EAA0B,EAAE;IACzC,IAAI,CAACC,IAAI,GAAGD,EAAA;EACd;EAEAxH,gBAAgB/N,EAAU,EAAW;IACnC,IAAI,CAAC,IAAI,CAAC1B,MAAM,EAAE,OAAO;IACzB,MAAM,CAACmX,YAAA,EAAcC,OAAA,CAAQ,GAAG,IAAI,CAACpX,MAAM,CAACyM,KAAK,CAAC,KAAK;IACvD,MAAM,CAAC4K,YAAA,EAAcC,OAAA,CAAQ,GAAG5V,EAAA,CAAG+K,KAAK,CAAC,KAAK;IAE9C;IACA,IAAI6K,OAAA,IAAWH,YAAA,KAAiBE,YAAA,IAAgBD,OAAA,KAAYE,OAAA,EAAS;MACnE,OAAO;IACT;IAEA;IACA,IAAIH,YAAA,KAAiBE,YAAA,EAAc;MACjC,OAAO;IACT;IAEA;IACA;IACA;IACA;IACA,OAAOD,OAAA,KAAYE,OAAA;EACrB;EAEA3H,aAAajO,EAAU,EAAQ;IAC7B,MAAM,GAAGgF,IAAA,GAAO,EAAE,CAAC,GAAGhF,EAAA,CAAG+K,KAAK,CAAC,KAAK;IAEpC,IAAA8K,mBAAA,CAAAC,kBAAkB,EAChB;MACE;MACA;MACA,IAAI9Q,IAAA,KAAS,MAAMA,IAAA,KAAS,OAAO;QACjCc,MAAA,CAAOiQ,QAAQ,CAAC,GAAG;QACnB;MACF;MAEA;MACA,MAAMC,OAAA,GAAUC,kBAAA,CAAmBjR,IAAA;MACnC;MACA,MAAMkR,IAAA,GAAOnD,QAAA,CAASoD,cAAc,CAACH,OAAA;MACrC,IAAIE,IAAA,EAAM;QACRA,IAAA,CAAKE,cAAc;QACnB;MACF;MACA;MACA;MACA,MAAMC,MAAA,GAAStD,QAAA,CAASuD,iBAAiB,CAACN,OAAA,CAAQ,CAAC,EAAE;MACrD,IAAIK,MAAA,EAAQ;QACVA,MAAA,CAAOD,cAAc;MACvB;IACF,GACA;MACEG,cAAA,EAAgB,IAAI,CAACxI,eAAe,CAAC/N,EAAA;IACvC;EAEJ;EAEAsO,SAAShQ,MAAc,EAAW;IAChC,OAAO,IAAI,CAACA,MAAM,KAAKA,MAAA;EACzB;EAEA;;;;;;EAMA,MAAMkY,SACJhX,GAAW,EACXlB,MAAoB,EACpBX,OAA6B,EACd;IAFf,IAAAW,MAAA,aAAAA,MAAA,GAAiBkB,GAAA;IACjB,IAAA7B,OAAA,aAAAA,OAAA,GAA2B,CAAC;IAE5B;IACA,IAAIqE,OAAA,CAAQC,GAAG,CAACoG,QAAQ,KAAK,cAAc;MACzC;IACF;IAEA,IAAI,OAAOvC,MAAA,KAAW,eAAe,IAAA2Q,MAAA,CAAAC,KAAK,EAAC5Q,MAAA,CAAO6Q,SAAS,CAACC,SAAS,GAAG;MACtE;MACA;MACA;MACA;IACF;IACA,IAAIvI,MAAA,GAAS,IAAA3L,iBAAA,CAAAC,gBAAgB,EAACnD,GAAA;IAC9B,MAAMqX,WAAA,GAAcxI,MAAA,CAAOnQ,QAAQ;IAEnC,IAAI;MAAEA,QAAQ;MAAE+F;IAAK,CAAE,GAAGoK,MAAA;IAC1B,MAAMyI,gBAAA,GAAmB5Y,QAAA;IAEzB,IAAI8D,OAAA,CAAQC,GAAG,CAACmK,mBAAmB,EAAE;MACnC,IAAIzO,OAAA,CAAQsB,MAAM,KAAK,OAAO;QAC5Bf,QAAA,GAAW,IAAAuF,oBAAA,CAAAC,mBAAmB,EAAExF,QAAA,EAAU,IAAI,CAAC2D,OAAO,EAAE3D,QAAQ;QAChEmQ,MAAA,CAAOnQ,QAAQ,GAAGA,QAAA;QAClBsB,GAAA,GAAM,IAAA+M,UAAA,CAAAC,oBAAoB,EAAC6B,MAAA;QAE3B,IAAIjK,QAAA,GAAW,IAAA1B,iBAAA,CAAAC,gBAAgB,EAACrE,MAAA;QAChC,MAAM+N,gBAAA,GAAmB,IAAA5I,oBAAA,CAAAC,mBAAmB,EAC1CU,QAAA,CAASlG,QAAQ,EACjB,IAAI,CAAC2D,OAAO;QAEduC,QAAA,CAASlG,QAAQ,GAAGmO,gBAAA,CAAiBnO,QAAQ;QAC7CP,OAAA,CAAQsB,MAAM,GAAGoN,gBAAA,CAAiBC,cAAc,IAAI,IAAI,CAACzH,aAAa;QACtEvG,MAAA,GAAS,IAAAiO,UAAA,CAAAC,oBAAoB,EAACpI,QAAA;MAChC;IACF;IAEA,MAAM1D,KAAA,GAAQ,MAAM,IAAI,CAAC1C,UAAU,CAACkF,WAAW;IAC/C,IAAIhD,UAAA,GAAa5B,MAAA;IAEjB,MAAMW,MAAA,GACJ,OAAOtB,OAAA,CAAQsB,MAAM,KAAK,cACtBtB,OAAA,CAAQsB,MAAM,IAAI4E,SAAA,GAClB,IAAI,CAAC5E,MAAM;IAEjB,MAAMyP,iBAAA,GAAoB,MAAMrR,iBAAA,CAAkB;MAChDiB,MAAA,EAAQA,MAAA;MACRW,MAAA,EAAQA,MAAA;MACRlB,MAAA,EAAQ;IACV;IAEA,IAAIiE,OAAA,CAAQC,GAAG,CAAC2B,mBAAmB,IAAItF,MAAA,CAAOsB,UAAU,CAAC,MAAM;MAC7D,IAAI4D,QAAA;MACF;QAAED,UAAA,EAAYC;MAAQ,CAAE,GAAG,MAAM,IAAAL,YAAA,CAAAC,sBAAsB,GAAC;MAE1D,MAAMuL,cAAA,GAAiB,IAAA5K,gBAAA,CAAAC,OAAe,EACpC,IAAAnF,YAAA,CAAAC,WAAW,EAAC,IAAAC,UAAA,CAAAC,SAAS,EAACV,MAAA,EAAQ,IAAI,CAACW,MAAM,GAAG,OAC5CyB,KAAA,EACA8C,QAAA,EACA6K,MAAA,CAAOpK,KAAK,EACX2K,CAAA,IAAcnO,mBAAA,CAAoBmO,CAAA,EAAGlO,KAAA,GACtC,IAAI,CAACmB,OAAO;MAGd,IAAI8M,cAAA,CAAeE,YAAY,EAAE;QAC/B;MACF;MAEA,IAAI,CAACH,iBAAA,EAAmB;QACtBxO,UAAA,GAAa,IAAA0N,aAAA,CAAAC,YAAY,EACvB,IAAAnP,eAAA,CAAAC,cAAc,EAACgQ,cAAA,CAAerQ,MAAM,GACpC,IAAI,CAACW,MAAM;MAEf;MAEA,IAAI0P,cAAA,CAAexK,WAAW,IAAIwK,cAAA,CAAe1O,YAAY,EAAE;QAC7D;QACA;QACA/B,QAAA,GAAWyQ,cAAA,CAAe1O,YAAY;QACtCoO,MAAA,CAAOnQ,QAAQ,GAAGA,QAAA;QAElB,IAAI,CAACwQ,iBAAA,EAAmB;UACtBlP,GAAA,GAAM,IAAA+M,UAAA,CAAAC,oBAAoB,EAAC6B,MAAA;QAC7B;MACF;IACF;IACAA,MAAA,CAAOnQ,QAAQ,GAAGuC,mBAAA,CAAoB4N,MAAA,CAAOnQ,QAAQ,EAAEwC,KAAA;IAEvD,IAAI,IAAAQ,UAAA,CAAAC,cAAc,EAACkN,MAAA,CAAOnQ,QAAQ,GAAG;MACnCA,QAAA,GAAWmQ,MAAA,CAAOnQ,QAAQ;MAC1BmQ,MAAA,CAAOnQ,QAAQ,GAAGA,QAAA;MAClBX,MAAA,CAAOC,MAAM,CACXyG,KAAA,EACA,IAAAM,aAAA,CAAAC,eAAe,EAAC,IAAApD,WAAA,CAAAC,aAAa,EAACgN,MAAA,CAAOnQ,QAAQ,GAC3C,IAAAE,UAAA,CAAAC,SAAS,EAACC,MAAA,EAAQJ,QAAQ,KACvB,CAAC;MAGR,IAAI,CAACwQ,iBAAA,EAAmB;QACtBlP,GAAA,GAAM,IAAA+M,UAAA,CAAAC,oBAAoB,EAAC6B,MAAA;MAC7B;IACF;IAEA,MAAM/I,IAAA,GACJtD,OAAA,CAAQC,GAAG,CAAC8U,0BAA0B,KAAK,WACvC,OACA,MAAM3R,qBAAA,CAAsB;MAC1BC,SAAA,EAAWA,CAAA,KACT6B,aAAA,CAAc;QACZ1B,QAAA,EAAU,IAAI,CAACxH,UAAU,CAACqW,WAAW,CAAC;UACpC1M,IAAA,EAAM,IAAA4E,UAAA,CAAAC,oBAAoB,EAAC;YACzBtO,QAAA,EAAU4Y,gBAAA;YACV7S;UACF;UACAqQ,iBAAA,EAAmB;UACnBhW,MAAA,EAAQ4B,UAAA;UACRjB;QACF;QACAoI,aAAA,EAAe;QACfC,cAAA,EAAgB;QAChBC,SAAA,EAAW;QACXJ,aAAA,EAAe,IAAI,CAACqN,GAAG;QACvBhN,YAAA,EAAc,CAAC,IAAI,CAAC2I,SAAS;QAC7B/I,UAAA,EAAY;MACd;MACF9I,MAAA,EAAQA,MAAA;MACRW,MAAA,EAAQA,MAAA;MACRlB,MAAA,EAAQ;IACV;IAEN;;;;IAIA,IAAI,CAAAuH,IAAA,oBAAAA,IAAA,CAAMC,MAAM,CAACd,IAAI,MAAK,WAAW;MACnC4J,MAAA,CAAOnQ,QAAQ,GAAGoH,IAAA,CAAKC,MAAM,CAACtF,YAAY;MAC1C/B,QAAA,GAAWoH,IAAA,CAAKC,MAAM,CAACtF,YAAY;MACnCgE,KAAA,GAAQ;QAAE,GAAGA,KAAK;QAAE,GAAGqB,IAAA,CAAKC,MAAM,CAACnB,QAAQ,CAACH;MAAM;MAClD/D,UAAA,GAAaoF,IAAA,CAAKC,MAAM,CAACnB,QAAQ,CAAClG,QAAQ;MAC1CsB,GAAA,GAAM,IAAA+M,UAAA,CAAAC,oBAAoB,EAAC6B,MAAA;IAC7B;IAEA;;;;IAIA,IAAI,CAAA/I,IAAA,oBAAAA,IAAA,CAAMC,MAAM,CAACd,IAAI,MAAK,qBAAqB;MAC7C;IACF;IAEA,MAAMsE,KAAA,GAAQ,IAAAnI,oBAAA,CAAAC,mBAAmB,EAAC3C,QAAA;IAElC,IAAI,MAAM,IAAI,CAAC+L,IAAI,CAAC3L,MAAA,EAAQ4B,UAAA,EAAYvC,OAAA,CAAQsB,MAAM,EAAE,OAAO;MAC7D,IAAI,CAACkP,UAAU,CAAC0I,WAAA,CAAY,GAAG;QAAErI,WAAA,EAAa;MAAK;IACrD;IAEA,MAAM3Q,OAAA,CAAQoF,GAAG,CAAC,CAChB,IAAI,CAACjF,UAAU,CAACgZ,MAAM,CAACjO,KAAA,EAAO1F,IAAI,CAAE4T,KAAA;MAClC,OAAOA,KAAA,GACH/P,aAAA,CAAc;QACZ1B,QAAA,EAAU,CAAAF,IAAA,oBAAAA,IAAA,CAAMG,IAAI,IAChBH,IAAA,oBAAAA,IAAA,CAAME,QAAQ,GACd,IAAI,CAACxH,UAAU,CAACqW,WAAW,CAAC;UAC1B1M,IAAA,EAAMnI,GAAA;UACNlB,MAAA,EAAQ4B,UAAA;UACRjB,MAAA,EAAQA;QACV;QACJqI,cAAA,EAAgB;QAChBC,SAAA,EAAW;QACXJ,aAAA,EAAe,IAAI,CAACqN,GAAG;QACvBhN,YAAA,EAAc,CAAC,IAAI,CAAC2I,SAAS;QAC7B/I,UAAA,EAAY;QACZM,wBAAA,EACE/J,OAAA,CAAQ+J,wBAAwB,IAC/B/J,OAAA,CAAQuZ,QAAQ,IACf,CAAC,CAAClV,OAAA,CAAQC,GAAG,CAACkV;MACpB,GACG9T,IAAI,CAAC,MAAM,OACXiF,KAAK,CAAC,MAAM,SACf;IACN,IACA,IAAI,CAACtK,UAAU,CAACL,OAAA,CAAQuZ,QAAQ,GAAG,aAAa,WAAW,CAACnO,KAAA,EAC7D;EACH;EAEA,MAAM8I,eAAe9I,KAAa,EAAE;IAClC,MAAMG,eAAA,GAAkBJ,mBAAA,CAAoB;MAAEC,KAAA;MAAOhL,MAAA,EAAQ;IAAK;IAElE,IAAI;MACF,MAAMqZ,eAAA,GAAkB,MAAM,IAAI,CAACpZ,UAAU,CAACqZ,QAAQ,CAACtO,KAAA;MACvDG,eAAA;MAEA,OAAOkO,eAAA;IACT,EAAE,OAAO7O,GAAA,EAAK;MACZW,eAAA;MACA,MAAMX,GAAA;IACR;EACF;EAEA2M,SAAYoC,EAAoB,EAAc;IAC5C,IAAI5Z,SAAA,GAAY;IAChB,MAAMsL,MAAA,GAASA,CAAA;MACbtL,SAAA,GAAY;IACd;IACA,IAAI,CAACuL,GAAG,GAAGD,MAAA;IACX,OAAOsO,EAAA,GAAKjU,IAAI,CAAEiC,IAAA;MAChB,IAAI0D,MAAA,KAAW,IAAI,CAACC,GAAG,EAAE;QACvB,IAAI,CAACA,GAAG,GAAG;MACb;MAEA,IAAIvL,SAAA,EAAW;QACb,MAAM6K,GAAA,GAAW,IAAI9K,KAAA,CAAM;QAC3B8K,GAAA,CAAI7K,SAAS,GAAG;QAChB,MAAM6K,GAAA;MACR;MAEA,OAAOjD,IAAA;IACT;EACF;EAEAiS,eAAe/R,QAAgB,EAAE;IAC/B;IACA,OAAO0B,aAAA,CAAc;MACnB1B,QAAA;MACA8B,cAAA,EAAgB;MAChBC,SAAA,EAAW;MACXJ,aAAA,EAAe,IAAI,CAACqN,GAAG;MACvBhN,YAAA,EAAc;MACdJ,UAAA,EAAY;IACd,GAAG/D,IAAI,CAACC,KAAA;UAAC;QAAEoC;MAAI,CAAE,GAAApC,KAAA;aAAM;QAAEgC,IAAA,EAAMI;MAAK;;EACtC;EAEAgO,gBACE7C,SAAwB,EACxB2G,GAAoB,EACU;IAC9B,MAAM;MAAE3G,SAAA,EAAW4G;IAAG,CAAE,GAAG,IAAI,CAACtJ,UAAU,CAAC,QAAQ;IACnD,MAAMuJ,OAAA,GAAU,IAAI,CAACC,QAAQ,CAACF,GAAA;IAC9BD,GAAA,CAAIE,OAAO,GAAGA,OAAA;IACd,OAAO,IAAAhY,MAAA,CAAAkY,mBAAmB,EAAyBH,GAAA,EAAK;MACtDC,OAAA;MACA7G,SAAA;MACA9S,MAAA,EAAQ,IAAI;MACZyZ;IACF;EACF;EAEA,IAAIzO,MAAA,EAAgB;IAClB,OAAO,IAAI,CAACgD,KAAK,CAAChD,KAAK;EACzB;EAEA,IAAI7K,SAAA,EAAmB;IACrB,OAAO,IAAI,CAAC6N,KAAK,CAAC7N,QAAQ;EAC5B;EAEA,IAAI+F,MAAA,EAAwB;IAC1B,OAAO,IAAI,CAAC8H,KAAK,CAAC9H,KAAK;EACzB;EAEA,IAAI3F,OAAA,EAAiB;IACnB,OAAO,IAAI,CAACyN,KAAK,CAACzN,MAAM;EAC1B;EAEA,IAAIW,OAAA,EAA6B;IAC/B,OAAO,IAAI,CAAC8M,KAAK,CAAC9M,MAAM;EAC1B;EAEA,IAAImR,WAAA,EAAsB;IACxB,OAAO,IAAI,CAACrE,KAAK,CAACqE,UAAU;EAC9B;EAEA,IAAID,UAAA,EAAqB;IACvB,OAAO,IAAI,CAACpE,KAAK,CAACoE,SAAS;EAC7B;EA9zDA0H,YACE3Z,QAAgB,EAChB+F,KAAqB,EACrBjE,EAAU,EACV;IACE8X,YAAY;IACZ9Z,UAAU;IACVyZ,GAAG;IACHM,OAAO;IACPlH,SAAS;IACTtI,GAAG;IACHyP,YAAY;IACZ5H,UAAU;IACVnR,MAAM;IACN4C,OAAO;IACPgD,aAAa;IACbiI,aAAa;IACbqD;EAAS,CAeV,EACD;IAzEF;SACAqE,GAAA,GAAqB,CAAC;IACtB;SACAD,GAAA,GAAqB,CAAC;SAgBtB0D,oBAAA,GAAuB;SAiBf1O,IAAA,GAAepM,SAAA;SAsMvB+a,UAAA,GAAcpO,CAAA;MACZ,MAAM;QAAEmO;MAAoB,CAAE,GAAG,IAAI;MACrC,IAAI,CAACA,oBAAoB,GAAG;MAE5B,MAAMlM,KAAA,GAAQjC,CAAA,CAAEiC,KAAK;MAErB,IAAI,CAACA,KAAA,EAAO;QACV;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,MAAM;UAAE7N,QAAQ;UAAE+F;QAAK,CAAE,GAAG,IAAI;QAChC,IAAI,CAAC+J,WAAW,CACd,gBACA,IAAAzB,UAAA,CAAAC,oBAAoB,EAAC;UAAEtO,QAAA,EAAU,IAAAW,YAAA,CAAAC,WAAW,EAACZ,QAAA;UAAW+F;QAAM,IAC9D,IAAAvE,MAAA,CAAAyT,MAAM;QAER;MACF;MAEA;MACA,IAAIpH,KAAA,CAAMoM,IAAI,EAAE;QACdrS,MAAA,CAAO+B,QAAQ,CAACsB,MAAM;QACtB;MACF;MAEA,IAAI,CAAC4C,KAAA,CAAMsH,GAAG,EAAE;QACd;MACF;MAEA;MACA,IACE4E,oBAAA,IACA,IAAI,CAAChZ,MAAM,KAAK8M,KAAA,CAAMpO,OAAO,CAACsB,MAAM,IACpC8M,KAAA,CAAM/L,EAAE,KAAK,IAAI,CAAC1B,MAAM,EACxB;QACA;MACF;MAEA,IAAI+M,YAAA;MACJ,MAAM;QAAE7L,GAAG;QAAEQ,EAAE;QAAErC,OAAO;QAAE4S;MAAG,CAAE,GAAGxE,KAAA;MAClC,IAAI/J,OAAA,CAAQC,GAAG,CAAC4D,yBAAyB,EAAE;QACzC,IAAID,uBAAA,EAAyB;UAC3B,IAAI,IAAI,CAAC2D,IAAI,KAAKgH,GAAA,EAAK;YACrB;YACA,IAAI;cACFtK,cAAA,CAAeC,OAAO,CACpB,mBAAmB,IAAI,CAACqD,IAAI,EAC5BxC,IAAA,CAAKyC,SAAS,CAAC;gBAAEC,CAAA,EAAGC,IAAA,CAAKC,WAAW;gBAAEC,CAAA,EAAGF,IAAA,CAAKG;cAAY;YAE9D,EAAE,OAAAC,CAAA,EAAM,CAAC;YAET;YACA,IAAI;cACF,MAAM9D,CAAA,GAAIC,cAAA,CAAemS,OAAO,CAAC,mBAAmB7H,GAAA;cACpDlF,YAAA,GAAetE,IAAA,CAAKC,KAAK,CAAChB,CAAA;YAC5B,EAAE,OAAA8D,CAAA,EAAM;cACNuB,YAAA,GAAe;gBAAE5B,CAAA,EAAG;gBAAGG,CAAA,EAAG;cAAE;YAC9B;UACF;QACF;MACF;MACA,IAAI,CAACL,IAAI,GAAGgH,GAAA;MAEZ,MAAM;QAAErS;MAAQ,CAAE,GAAG,IAAAwE,iBAAA,CAAAC,gBAAgB,EAACnD,GAAA;MAEtC;MACA;MACA,IACE,IAAI,CAAC0M,KAAK,IACVlM,EAAA,KAAO,IAAAnB,YAAA,CAAAC,WAAW,EAAC,IAAI,CAACR,MAAM,KAC9BJ,QAAA,KAAa,IAAAW,YAAA,CAAAC,WAAW,EAAC,IAAI,CAACZ,QAAQ,GACtC;QACA;MACF;MAEA;MACA;MACA,IAAI,IAAI,CAACsX,IAAI,IAAI,CAAC,IAAI,CAACA,IAAI,CAACzJ,KAAA,GAAQ;QAClC;MACF;MAEA,IAAI,CAAChC,MAAM,CACT,gBACAvK,GAAA,EACAQ,EAAA,EACAzC,MAAA,CAAOC,MAAM,CAA2C,CAAC,GAAGG,OAAA,EAAS;QACnEgO,OAAA,EAAShO,OAAA,CAAQgO,OAAO,IAAI,IAAI,CAACyH,QAAQ;QACzCnU,MAAA,EAAQtB,OAAA,CAAQsB,MAAM,IAAI,IAAI,CAAC4F,aAAa;QAC5C;QACA6G,EAAA,EAAI;MACN,IACAL,YAAA;IAEJ;IAnQE;IACA,MAAMtC,KAAA,GAAQ,IAAAnI,oBAAA,CAAAC,mBAAmB,EAAC3C,QAAA;IAElC;IACA,IAAI,CAACiQ,UAAU,GAAG,CAAC;IACnB;IACA;IACA;IACA,IAAIjQ,QAAA,KAAa,WAAW;MAC1B,IAAI,CAACiQ,UAAU,CAACpF,KAAA,CAAM,GAAG;QACvB8H,SAAA;QACAwH,OAAA,EAAS;QACTjH,KAAA,EAAO0G,YAAA;QACPvP,GAAA;QACA8I,OAAA,EAASyG,YAAA,IAAgBA,YAAA,CAAazG,OAAO;QAC7CC,OAAA,EAASwG,YAAA,IAAgBA,YAAA,CAAaxG;MACxC;IACF;IAEA,IAAI,CAACnD,UAAU,CAAC,QAAQ,GAAG;MACzB0C,SAAA,EAAW4G,GAAA;MACXhE,WAAA,EAAa;IAGf;IAEA,IAAIzR,OAAA,CAAQC,GAAG,CAACkI,mCAAmC,EAAE;MACnD,MAAM;QAAEmO;MAAW,CAAE,GACnBvD,OAAA,CAAQ;MAMV,MAAMwD,kBAAA,GAAqCvW,OAAA,CAAQC,GAAG,CACnDuW,6BAA6B;MAEhC,MAAMC,gBAAA,GAAuCF,kBAAA,GACzCA,kBAAA,GACA1U,SAAA;MAEJ,MAAM6U,kBAAA,GAAqC1W,OAAA,CAAQC,GAAG,CACnD0W,6BAA6B;MAEhC,MAAMC,iBAAA,GAAwCF,kBAAA,GAC1CA,kBAAA,GACA7U,SAAA;MAEJ,IAAI4U,gBAAA,oBAAAA,gBAAA,CAAkBI,SAAS,EAAE;QAC/B,IAAI,CAAClO,MAAM,GAAG,IAAI2N,WAAA,CAChBG,gBAAA,CAAiBK,QAAQ,EACzBL,gBAAA,CAAiBM,SAAS;QAE5B,IAAI,CAACpO,MAAM,CAACqO,MAAM,CAACP,gBAAA;MACrB;MAEA,IAAIG,iBAAA,oBAAAA,iBAAA,CAAmBC,SAAS,EAAE;QAChC,IAAI,CAACzN,MAAM,GAAG,IAAIkN,WAAA,CAChBM,iBAAA,CAAkBE,QAAQ,EAC1BF,iBAAA,CAAkBG,SAAS;QAE7B,IAAI,CAAC3N,MAAM,CAAC4N,MAAM,CAACJ,iBAAA;MACrB;IACF;IAEA;IACA;IACA,IAAI,CAAClL,MAAM,GAAGtQ,MAAA,CAAOsQ,MAAM;IAE3B,IAAI,CAAC1P,UAAU,GAAGA,UAAA;IAClB;IACA;IACA,MAAMib,iBAAA,GACJ,IAAA/X,UAAA,CAAAC,cAAc,EAACjD,QAAA,KAAawL,IAAA,CAAKsI,aAAa,CAACkH,UAAU;IAE3D,IAAI,CAACvX,QAAQ,GAAGK,OAAA,CAAQC,GAAG,CAACkX,sBAAsB,IAAI;IACtD,IAAI,CAAC9D,GAAG,GAAG2C,YAAA;IACX,IAAI,CAAC/O,GAAG,GAAG;IACX,IAAI,CAAC0O,QAAQ,GAAGI,OAAA;IAChB;IACA;IACA,IAAI,CAAC7L,KAAK,GAAG;IACb,IAAI,CAACa,cAAc,GAAG;IACtB,IAAI,CAACd,OAAO,GAAG,CAAC,EACdvC,IAAA,CAAKsI,aAAa,CAACoH,IAAI,IACvB1P,IAAA,CAAKsI,aAAa,CAACqH,GAAG,IACtB3P,IAAA,CAAKsI,aAAa,CAACsH,qBAAqB,IACvC5P,IAAA,CAAKsI,aAAa,CAACuH,MAAM,IAAI,CAAC7P,IAAA,CAAKsI,aAAa,CAACwH,GAAG,IACpD,CAACP,iBAAA,IACA,CAACvP,IAAA,CAAK7B,QAAQ,CAAC4R,MAAM,IACrB,CAACzX,OAAA,CAAQC,GAAG,CAAC2B,mBAAmB;IAGpC,IAAI5B,OAAA,CAAQC,GAAG,CAACmK,mBAAmB,EAAE;MACnC,IAAI,CAACvK,OAAO,GAAGA,OAAA;MACf,IAAI,CAACgD,aAAa,GAAGA,aAAA;MACrB,IAAI,CAACiI,aAAa,GAAGA,aAAA;MACrB,IAAI,CAACC,cAAc,GAAG,CAAC,CAAC,IAAAH,mBAAA,CAAAC,kBAAkB,EACxCC,aAAA,EACApD,IAAA,CAAK7B,QAAQ,CAACmF,QAAQ;IAE1B;IAEA,IAAI,CAACjB,KAAK,GAAG;MACXhD,KAAA;MACA7K,QAAA;MACA+F,KAAA;MACA3F,MAAA,EAAQ2a,iBAAA,GAAoB/a,QAAA,GAAW8B,EAAA;MACvCmQ,SAAA,EAAW,CAAC,CAACA,SAAA;MACblR,MAAA,EAAQ+C,OAAA,CAAQC,GAAG,CAACmK,mBAAmB,GAAGnN,MAAA,GAAS4E,SAAA;MACnDuM;IACF;IAEA,IAAI,CAACsJ,gCAAgC,GAAG7b,OAAA,CAAQC,OAAO,CAAC;IAExD,IAAI,OAAOgI,MAAA,KAAW,aAAa;MACjC;MACA;MACA,IAAI,CAAC9F,EAAA,CAAGJ,UAAU,CAAC,OAAO;QACxB;QACA;QACA,MAAMjC,OAAA,GAA6B;UAAEsB;QAAO;QAC5C,MAAMX,MAAA,GAAS,IAAAoB,MAAA,CAAAyT,MAAM;QAErB,IAAI,CAACuG,gCAAgC,GAAGrc,iBAAA,CAAkB;UACxDU,MAAA,EAAQ,IAAI;UACZkB,MAAA;UACAX;QACF,GAAG+E,IAAI,CAAEiB,OAAA;UAGL3G,OAAA,CAAgBkO,kBAAkB,GAAG7L,EAAA,KAAO9B,QAAA;UAE9C,IAAI,CAAC8P,WAAW,CACd,gBACA1J,OAAA,GACIhG,MAAA,GACA,IAAAiO,UAAA,CAAAC,oBAAoB,EAAC;YACnBtO,QAAA,EAAU,IAAAW,YAAA,CAAAC,WAAW,EAACZ,QAAA;YACtB+F;UACF,IACJ3F,MAAA,EACAX,OAAA;UAEF,OAAO2G,OAAA;QACT;MACF;MAEAwB,MAAA,CAAO6T,gBAAgB,CAAC,YAAY,IAAI,CAACzB,UAAU;MAEnD;MACA;MACA,IAAIlW,OAAA,CAAQC,GAAG,CAAC4D,yBAAyB,EAAE;QACzC,IAAID,uBAAA,EAAyB;UAC3BE,MAAA,CAAOC,OAAO,CAAC6T,iBAAiB,GAAG;QACrC;MACF;IACF;EACF;AA+nDF;AA92DqBxc,MAAA,CA6CZsQ,MAAA,GAAmC,IAAAmM,KAAA,CAAA7V,OAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}